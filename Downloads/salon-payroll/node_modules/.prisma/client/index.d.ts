
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model PayrollData
 * 
 */
export type PayrollData = $Result.DefaultSelection<Prisma.$PayrollDataPayload>
/**
 * Model DailyCommissionEntry
 * 
 */
export type DailyCommissionEntry = $Result.DefaultSelection<Prisma.$DailyCommissionEntryPayload>
/**
 * Model SystemSettings
 * 
 */
export type SystemSettings = $Result.DefaultSelection<Prisma.$SystemSettingsPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  USER: 'USER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const EmployeeGroup: {
  THO_PHU: 'THO_PHU',
  THO_CHINH: 'THO_CHINH',
  RELAX: 'RELAX',
  NAIL: 'NAIL'
};

export type EmployeeGroup = (typeof EmployeeGroup)[keyof typeof EmployeeGroup]


export const ServiceType: {
  SERVICE: 'SERVICE',
  PRODUCT: 'PRODUCT'
};

export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type EmployeeGroup = $Enums.EmployeeGroup

export const EmployeeGroup: typeof $Enums.EmployeeGroup

export type ServiceType = $Enums.ServiceType

export const ServiceType: typeof $Enums.ServiceType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payrollData`: Exposes CRUD operations for the **PayrollData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayrollData
    * const payrollData = await prisma.payrollData.findMany()
    * ```
    */
  get payrollData(): Prisma.PayrollDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dailyCommissionEntry`: Exposes CRUD operations for the **DailyCommissionEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyCommissionEntries
    * const dailyCommissionEntries = await prisma.dailyCommissionEntry.findMany()
    * ```
    */
  get dailyCommissionEntry(): Prisma.DailyCommissionEntryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemSettings`: Exposes CRUD operations for the **SystemSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemSettings
    * const systemSettings = await prisma.systemSettings.findMany()
    * ```
    */
  get systemSettings(): Prisma.SystemSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Employee: 'Employee',
    PayrollData: 'PayrollData',
    DailyCommissionEntry: 'DailyCommissionEntry',
    SystemSettings: 'SystemSettings',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "employee" | "payrollData" | "dailyCommissionEntry" | "systemSettings" | "auditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmployeeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      PayrollData: {
        payload: Prisma.$PayrollDataPayload<ExtArgs>
        fields: Prisma.PayrollDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayrollDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayrollDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollDataPayload>
          }
          findFirst: {
            args: Prisma.PayrollDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayrollDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollDataPayload>
          }
          findMany: {
            args: Prisma.PayrollDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollDataPayload>[]
          }
          create: {
            args: Prisma.PayrollDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollDataPayload>
          }
          createMany: {
            args: Prisma.PayrollDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PayrollDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollDataPayload>[]
          }
          delete: {
            args: Prisma.PayrollDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollDataPayload>
          }
          update: {
            args: Prisma.PayrollDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollDataPayload>
          }
          deleteMany: {
            args: Prisma.PayrollDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PayrollDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PayrollDataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollDataPayload>[]
          }
          upsert: {
            args: Prisma.PayrollDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollDataPayload>
          }
          aggregate: {
            args: Prisma.PayrollDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayrollData>
          }
          groupBy: {
            args: Prisma.PayrollDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayrollDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayrollDataCountArgs<ExtArgs>
            result: $Utils.Optional<PayrollDataCountAggregateOutputType> | number
          }
        }
      }
      DailyCommissionEntry: {
        payload: Prisma.$DailyCommissionEntryPayload<ExtArgs>
        fields: Prisma.DailyCommissionEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DailyCommissionEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCommissionEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DailyCommissionEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCommissionEntryPayload>
          }
          findFirst: {
            args: Prisma.DailyCommissionEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCommissionEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DailyCommissionEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCommissionEntryPayload>
          }
          findMany: {
            args: Prisma.DailyCommissionEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCommissionEntryPayload>[]
          }
          create: {
            args: Prisma.DailyCommissionEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCommissionEntryPayload>
          }
          createMany: {
            args: Prisma.DailyCommissionEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DailyCommissionEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCommissionEntryPayload>[]
          }
          delete: {
            args: Prisma.DailyCommissionEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCommissionEntryPayload>
          }
          update: {
            args: Prisma.DailyCommissionEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCommissionEntryPayload>
          }
          deleteMany: {
            args: Prisma.DailyCommissionEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DailyCommissionEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DailyCommissionEntryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCommissionEntryPayload>[]
          }
          upsert: {
            args: Prisma.DailyCommissionEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyCommissionEntryPayload>
          }
          aggregate: {
            args: Prisma.DailyCommissionEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDailyCommissionEntry>
          }
          groupBy: {
            args: Prisma.DailyCommissionEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<DailyCommissionEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.DailyCommissionEntryCountArgs<ExtArgs>
            result: $Utils.Optional<DailyCommissionEntryCountAggregateOutputType> | number
          }
        }
      }
      SystemSettings: {
        payload: Prisma.$SystemSettingsPayload<ExtArgs>
        fields: Prisma.SystemSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          findFirst: {
            args: Prisma.SystemSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          findMany: {
            args: Prisma.SystemSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          create: {
            args: Prisma.SystemSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          createMany: {
            args: Prisma.SystemSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          delete: {
            args: Prisma.SystemSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          update: {
            args: Prisma.SystemSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          deleteMany: {
            args: Prisma.SystemSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          upsert: {
            args: Prisma.SystemSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          aggregate: {
            args: Prisma.SystemSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemSettings>
          }
          groupBy: {
            args: Prisma.SystemSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingsCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    employee?: EmployeeOmit
    payrollData?: PayrollDataOmit
    dailyCommissionEntry?: DailyCommissionEntryOmit
    systemSettings?: SystemSettingsOmit
    auditLog?: AuditLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    payrollData: number
    commissionEntries: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payrollData?: boolean | EmployeeCountOutputTypeCountPayrollDataArgs
    commissionEntries?: boolean | EmployeeCountOutputTypeCountCommissionEntriesArgs
  }

  // Custom InputTypes
  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountPayrollDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollDataWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCommissionEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyCommissionEntryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    password: string
    role: $Enums.Role
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      password: string
      role: $Enums.Role
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
  }


  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    basicSalary: number | null
    allowance: number | null
  }

  export type EmployeeSumAggregateOutputType = {
    basicSalary: number | null
    allowance: number | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    position: string | null
    department: string | null
    employeeGroup: $Enums.EmployeeGroup | null
    basicSalary: number | null
    allowance: number | null
    currentLevel: string | null
    isNewEmployee: boolean | null
    isActive: boolean | null
    hireDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    position: string | null
    department: string | null
    employeeGroup: $Enums.EmployeeGroup | null
    basicSalary: number | null
    allowance: number | null
    currentLevel: string | null
    isNewEmployee: boolean | null
    isActive: boolean | null
    hireDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    name: number
    code: number
    position: number
    department: number
    employeeGroup: number
    basicSalary: number
    allowance: number
    currentLevel: number
    isNewEmployee: number
    isActive: number
    hireDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    basicSalary?: true
    allowance?: true
  }

  export type EmployeeSumAggregateInputType = {
    basicSalary?: true
    allowance?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    position?: true
    department?: true
    employeeGroup?: true
    basicSalary?: true
    allowance?: true
    currentLevel?: true
    isNewEmployee?: true
    isActive?: true
    hireDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    position?: true
    department?: true
    employeeGroup?: true
    basicSalary?: true
    allowance?: true
    currentLevel?: true
    isNewEmployee?: true
    isActive?: true
    hireDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    position?: true
    department?: true
    employeeGroup?: true
    basicSalary?: true
    allowance?: true
    currentLevel?: true
    isNewEmployee?: true
    isActive?: true
    hireDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: string
    name: string
    code: string
    position: string
    department: string
    employeeGroup: $Enums.EmployeeGroup
    basicSalary: number
    allowance: number
    currentLevel: string
    isNewEmployee: boolean
    isActive: boolean
    hireDate: Date
    createdAt: Date
    updatedAt: Date
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    position?: boolean
    department?: boolean
    employeeGroup?: boolean
    basicSalary?: boolean
    allowance?: boolean
    currentLevel?: boolean
    isNewEmployee?: boolean
    isActive?: boolean
    hireDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    payrollData?: boolean | Employee$payrollDataArgs<ExtArgs>
    commissionEntries?: boolean | Employee$commissionEntriesArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    position?: boolean
    department?: boolean
    employeeGroup?: boolean
    basicSalary?: boolean
    allowance?: boolean
    currentLevel?: boolean
    isNewEmployee?: boolean
    isActive?: boolean
    hireDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    position?: boolean
    department?: boolean
    employeeGroup?: boolean
    basicSalary?: boolean
    allowance?: boolean
    currentLevel?: boolean
    isNewEmployee?: boolean
    isActive?: boolean
    hireDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    position?: boolean
    department?: boolean
    employeeGroup?: boolean
    basicSalary?: boolean
    allowance?: boolean
    currentLevel?: boolean
    isNewEmployee?: boolean
    isActive?: boolean
    hireDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmployeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "position" | "department" | "employeeGroup" | "basicSalary" | "allowance" | "currentLevel" | "isNewEmployee" | "isActive" | "hireDate" | "createdAt" | "updatedAt", ExtArgs["result"]["employee"]>
  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payrollData?: boolean | Employee$payrollDataArgs<ExtArgs>
    commissionEntries?: boolean | Employee$commissionEntriesArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EmployeeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      payrollData: Prisma.$PayrollDataPayload<ExtArgs>[]
      commissionEntries: Prisma.$DailyCommissionEntryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      position: string
      department: string
      employeeGroup: $Enums.EmployeeGroup
      basicSalary: number
      allowance: number
      currentLevel: string
      isNewEmployee: boolean
      isActive: boolean
      hireDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employees and returns the data saved in the database.
     * @param {EmployeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees and returns the data updated in the database.
     * @param {EmployeeUpdateManyAndReturnArgs} args - Arguments to update many Employees.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmployeeUpdateManyAndReturnArgs>(args: SelectSubset<T, EmployeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payrollData<T extends Employee$payrollDataArgs<ExtArgs> = {}>(args?: Subset<T, Employee$payrollDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    commissionEntries<T extends Employee$commissionEntriesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$commissionEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyCommissionEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'String'>
    readonly name: FieldRef<"Employee", 'String'>
    readonly code: FieldRef<"Employee", 'String'>
    readonly position: FieldRef<"Employee", 'String'>
    readonly department: FieldRef<"Employee", 'String'>
    readonly employeeGroup: FieldRef<"Employee", 'EmployeeGroup'>
    readonly basicSalary: FieldRef<"Employee", 'Int'>
    readonly allowance: FieldRef<"Employee", 'Int'>
    readonly currentLevel: FieldRef<"Employee", 'String'>
    readonly isNewEmployee: FieldRef<"Employee", 'Boolean'>
    readonly isActive: FieldRef<"Employee", 'Boolean'>
    readonly hireDate: FieldRef<"Employee", 'DateTime'>
    readonly createdAt: FieldRef<"Employee", 'DateTime'>
    readonly updatedAt: FieldRef<"Employee", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
  }

  /**
   * Employee createManyAndReturn
   */
  export type EmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
  }

  /**
   * Employee updateManyAndReturn
   */
  export type EmployeeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to delete.
     */
    limit?: number
  }

  /**
   * Employee.payrollData
   */
  export type Employee$payrollDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollData
     */
    select?: PayrollDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollData
     */
    omit?: PayrollDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollDataInclude<ExtArgs> | null
    where?: PayrollDataWhereInput
    orderBy?: PayrollDataOrderByWithRelationInput | PayrollDataOrderByWithRelationInput[]
    cursor?: PayrollDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayrollDataScalarFieldEnum | PayrollDataScalarFieldEnum[]
  }

  /**
   * Employee.commissionEntries
   */
  export type Employee$commissionEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCommissionEntry
     */
    select?: DailyCommissionEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyCommissionEntry
     */
    omit?: DailyCommissionEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCommissionEntryInclude<ExtArgs> | null
    where?: DailyCommissionEntryWhereInput
    orderBy?: DailyCommissionEntryOrderByWithRelationInput | DailyCommissionEntryOrderByWithRelationInput[]
    cursor?: DailyCommissionEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DailyCommissionEntryScalarFieldEnum | DailyCommissionEntryScalarFieldEnum[]
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model PayrollData
   */

  export type AggregatePayrollData = {
    _count: PayrollDataCountAggregateOutputType | null
    _avg: PayrollDataAvgAggregateOutputType | null
    _sum: PayrollDataSumAggregateOutputType | null
    _min: PayrollDataMinAggregateOutputType | null
    _max: PayrollDataMaxAggregateOutputType | null
  }

  export type PayrollDataAvgAggregateOutputType = {
    dailyRevenue: number | null
    monthlyRevenue: number | null
    serviceRevenue: number | null
    productRevenue: number | null
    facialRevenue: number | null
    washingRevenue: number | null
    chemicalRevenue: number | null
    bleachingRevenue: number | null
    cuttingRevenue: number | null
    oilTreatmentRevenue: number | null
    keratinRevenue: number | null
    spaFootRevenue: number | null
    nailDesignRevenue: number | null
    eyebrowThreadingRevenue: number | null
    bonus: number | null
    penalty: number | null
    advance: number | null
  }

  export type PayrollDataSumAggregateOutputType = {
    dailyRevenue: number | null
    monthlyRevenue: number | null
    serviceRevenue: number | null
    productRevenue: number | null
    facialRevenue: number | null
    washingRevenue: number | null
    chemicalRevenue: number | null
    bleachingRevenue: number | null
    cuttingRevenue: number | null
    oilTreatmentRevenue: number | null
    keratinRevenue: number | null
    spaFootRevenue: number | null
    nailDesignRevenue: number | null
    eyebrowThreadingRevenue: number | null
    bonus: number | null
    penalty: number | null
    advance: number | null
  }

  export type PayrollDataMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    month: string | null
    dailyRevenue: number | null
    monthlyRevenue: number | null
    serviceRevenue: number | null
    productRevenue: number | null
    facialRevenue: number | null
    washingRevenue: number | null
    chemicalRevenue: number | null
    bleachingRevenue: number | null
    cuttingRevenue: number | null
    oilTreatmentRevenue: number | null
    keratinRevenue: number | null
    spaFootRevenue: number | null
    nailDesignRevenue: number | null
    eyebrowThreadingRevenue: number | null
    kpiAchieved: boolean | null
    kpiDetails: string | null
    bonus: number | null
    penalty: number | null
    advance: number | null
    calculatedLevel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PayrollDataMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    month: string | null
    dailyRevenue: number | null
    monthlyRevenue: number | null
    serviceRevenue: number | null
    productRevenue: number | null
    facialRevenue: number | null
    washingRevenue: number | null
    chemicalRevenue: number | null
    bleachingRevenue: number | null
    cuttingRevenue: number | null
    oilTreatmentRevenue: number | null
    keratinRevenue: number | null
    spaFootRevenue: number | null
    nailDesignRevenue: number | null
    eyebrowThreadingRevenue: number | null
    kpiAchieved: boolean | null
    kpiDetails: string | null
    bonus: number | null
    penalty: number | null
    advance: number | null
    calculatedLevel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PayrollDataCountAggregateOutputType = {
    id: number
    employeeId: number
    month: number
    dailyRevenue: number
    monthlyRevenue: number
    serviceRevenue: number
    productRevenue: number
    facialRevenue: number
    washingRevenue: number
    chemicalRevenue: number
    bleachingRevenue: number
    cuttingRevenue: number
    oilTreatmentRevenue: number
    keratinRevenue: number
    spaFootRevenue: number
    nailDesignRevenue: number
    eyebrowThreadingRevenue: number
    kpiAchieved: number
    kpiDetails: number
    bonus: number
    penalty: number
    advance: number
    calculatedLevel: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PayrollDataAvgAggregateInputType = {
    dailyRevenue?: true
    monthlyRevenue?: true
    serviceRevenue?: true
    productRevenue?: true
    facialRevenue?: true
    washingRevenue?: true
    chemicalRevenue?: true
    bleachingRevenue?: true
    cuttingRevenue?: true
    oilTreatmentRevenue?: true
    keratinRevenue?: true
    spaFootRevenue?: true
    nailDesignRevenue?: true
    eyebrowThreadingRevenue?: true
    bonus?: true
    penalty?: true
    advance?: true
  }

  export type PayrollDataSumAggregateInputType = {
    dailyRevenue?: true
    monthlyRevenue?: true
    serviceRevenue?: true
    productRevenue?: true
    facialRevenue?: true
    washingRevenue?: true
    chemicalRevenue?: true
    bleachingRevenue?: true
    cuttingRevenue?: true
    oilTreatmentRevenue?: true
    keratinRevenue?: true
    spaFootRevenue?: true
    nailDesignRevenue?: true
    eyebrowThreadingRevenue?: true
    bonus?: true
    penalty?: true
    advance?: true
  }

  export type PayrollDataMinAggregateInputType = {
    id?: true
    employeeId?: true
    month?: true
    dailyRevenue?: true
    monthlyRevenue?: true
    serviceRevenue?: true
    productRevenue?: true
    facialRevenue?: true
    washingRevenue?: true
    chemicalRevenue?: true
    bleachingRevenue?: true
    cuttingRevenue?: true
    oilTreatmentRevenue?: true
    keratinRevenue?: true
    spaFootRevenue?: true
    nailDesignRevenue?: true
    eyebrowThreadingRevenue?: true
    kpiAchieved?: true
    kpiDetails?: true
    bonus?: true
    penalty?: true
    advance?: true
    calculatedLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PayrollDataMaxAggregateInputType = {
    id?: true
    employeeId?: true
    month?: true
    dailyRevenue?: true
    monthlyRevenue?: true
    serviceRevenue?: true
    productRevenue?: true
    facialRevenue?: true
    washingRevenue?: true
    chemicalRevenue?: true
    bleachingRevenue?: true
    cuttingRevenue?: true
    oilTreatmentRevenue?: true
    keratinRevenue?: true
    spaFootRevenue?: true
    nailDesignRevenue?: true
    eyebrowThreadingRevenue?: true
    kpiAchieved?: true
    kpiDetails?: true
    bonus?: true
    penalty?: true
    advance?: true
    calculatedLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PayrollDataCountAggregateInputType = {
    id?: true
    employeeId?: true
    month?: true
    dailyRevenue?: true
    monthlyRevenue?: true
    serviceRevenue?: true
    productRevenue?: true
    facialRevenue?: true
    washingRevenue?: true
    chemicalRevenue?: true
    bleachingRevenue?: true
    cuttingRevenue?: true
    oilTreatmentRevenue?: true
    keratinRevenue?: true
    spaFootRevenue?: true
    nailDesignRevenue?: true
    eyebrowThreadingRevenue?: true
    kpiAchieved?: true
    kpiDetails?: true
    bonus?: true
    penalty?: true
    advance?: true
    calculatedLevel?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PayrollDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollData to aggregate.
     */
    where?: PayrollDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollData to fetch.
     */
    orderBy?: PayrollDataOrderByWithRelationInput | PayrollDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayrollDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayrollData
    **/
    _count?: true | PayrollDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayrollDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayrollDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayrollDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayrollDataMaxAggregateInputType
  }

  export type GetPayrollDataAggregateType<T extends PayrollDataAggregateArgs> = {
        [P in keyof T & keyof AggregatePayrollData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayrollData[P]>
      : GetScalarType<T[P], AggregatePayrollData[P]>
  }




  export type PayrollDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollDataWhereInput
    orderBy?: PayrollDataOrderByWithAggregationInput | PayrollDataOrderByWithAggregationInput[]
    by: PayrollDataScalarFieldEnum[] | PayrollDataScalarFieldEnum
    having?: PayrollDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayrollDataCountAggregateInputType | true
    _avg?: PayrollDataAvgAggregateInputType
    _sum?: PayrollDataSumAggregateInputType
    _min?: PayrollDataMinAggregateInputType
    _max?: PayrollDataMaxAggregateInputType
  }

  export type PayrollDataGroupByOutputType = {
    id: string
    employeeId: string
    month: string
    dailyRevenue: number
    monthlyRevenue: number
    serviceRevenue: number
    productRevenue: number
    facialRevenue: number
    washingRevenue: number
    chemicalRevenue: number
    bleachingRevenue: number
    cuttingRevenue: number
    oilTreatmentRevenue: number
    keratinRevenue: number
    spaFootRevenue: number
    nailDesignRevenue: number
    eyebrowThreadingRevenue: number
    kpiAchieved: boolean
    kpiDetails: string
    bonus: number
    penalty: number
    advance: number
    calculatedLevel: string
    createdAt: Date
    updatedAt: Date
    _count: PayrollDataCountAggregateOutputType | null
    _avg: PayrollDataAvgAggregateOutputType | null
    _sum: PayrollDataSumAggregateOutputType | null
    _min: PayrollDataMinAggregateOutputType | null
    _max: PayrollDataMaxAggregateOutputType | null
  }

  type GetPayrollDataGroupByPayload<T extends PayrollDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayrollDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayrollDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayrollDataGroupByOutputType[P]>
            : GetScalarType<T[P], PayrollDataGroupByOutputType[P]>
        }
      >
    >


  export type PayrollDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    month?: boolean
    dailyRevenue?: boolean
    monthlyRevenue?: boolean
    serviceRevenue?: boolean
    productRevenue?: boolean
    facialRevenue?: boolean
    washingRevenue?: boolean
    chemicalRevenue?: boolean
    bleachingRevenue?: boolean
    cuttingRevenue?: boolean
    oilTreatmentRevenue?: boolean
    keratinRevenue?: boolean
    spaFootRevenue?: boolean
    nailDesignRevenue?: boolean
    eyebrowThreadingRevenue?: boolean
    kpiAchieved?: boolean
    kpiDetails?: boolean
    bonus?: boolean
    penalty?: boolean
    advance?: boolean
    calculatedLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollData"]>

  export type PayrollDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    month?: boolean
    dailyRevenue?: boolean
    monthlyRevenue?: boolean
    serviceRevenue?: boolean
    productRevenue?: boolean
    facialRevenue?: boolean
    washingRevenue?: boolean
    chemicalRevenue?: boolean
    bleachingRevenue?: boolean
    cuttingRevenue?: boolean
    oilTreatmentRevenue?: boolean
    keratinRevenue?: boolean
    spaFootRevenue?: boolean
    nailDesignRevenue?: boolean
    eyebrowThreadingRevenue?: boolean
    kpiAchieved?: boolean
    kpiDetails?: boolean
    bonus?: boolean
    penalty?: boolean
    advance?: boolean
    calculatedLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollData"]>

  export type PayrollDataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    month?: boolean
    dailyRevenue?: boolean
    monthlyRevenue?: boolean
    serviceRevenue?: boolean
    productRevenue?: boolean
    facialRevenue?: boolean
    washingRevenue?: boolean
    chemicalRevenue?: boolean
    bleachingRevenue?: boolean
    cuttingRevenue?: boolean
    oilTreatmentRevenue?: boolean
    keratinRevenue?: boolean
    spaFootRevenue?: boolean
    nailDesignRevenue?: boolean
    eyebrowThreadingRevenue?: boolean
    kpiAchieved?: boolean
    kpiDetails?: boolean
    bonus?: boolean
    penalty?: boolean
    advance?: boolean
    calculatedLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollData"]>

  export type PayrollDataSelectScalar = {
    id?: boolean
    employeeId?: boolean
    month?: boolean
    dailyRevenue?: boolean
    monthlyRevenue?: boolean
    serviceRevenue?: boolean
    productRevenue?: boolean
    facialRevenue?: boolean
    washingRevenue?: boolean
    chemicalRevenue?: boolean
    bleachingRevenue?: boolean
    cuttingRevenue?: boolean
    oilTreatmentRevenue?: boolean
    keratinRevenue?: boolean
    spaFootRevenue?: boolean
    nailDesignRevenue?: boolean
    eyebrowThreadingRevenue?: boolean
    kpiAchieved?: boolean
    kpiDetails?: boolean
    bonus?: boolean
    penalty?: boolean
    advance?: boolean
    calculatedLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PayrollDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "month" | "dailyRevenue" | "monthlyRevenue" | "serviceRevenue" | "productRevenue" | "facialRevenue" | "washingRevenue" | "chemicalRevenue" | "bleachingRevenue" | "cuttingRevenue" | "oilTreatmentRevenue" | "keratinRevenue" | "spaFootRevenue" | "nailDesignRevenue" | "eyebrowThreadingRevenue" | "kpiAchieved" | "kpiDetails" | "bonus" | "penalty" | "advance" | "calculatedLevel" | "createdAt" | "updatedAt", ExtArgs["result"]["payrollData"]>
  export type PayrollDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type PayrollDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type PayrollDataIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $PayrollDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayrollData"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      month: string
      dailyRevenue: number
      monthlyRevenue: number
      serviceRevenue: number
      productRevenue: number
      facialRevenue: number
      washingRevenue: number
      chemicalRevenue: number
      bleachingRevenue: number
      cuttingRevenue: number
      oilTreatmentRevenue: number
      keratinRevenue: number
      spaFootRevenue: number
      nailDesignRevenue: number
      eyebrowThreadingRevenue: number
      kpiAchieved: boolean
      kpiDetails: string
      bonus: number
      penalty: number
      advance: number
      calculatedLevel: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["payrollData"]>
    composites: {}
  }

  type PayrollDataGetPayload<S extends boolean | null | undefined | PayrollDataDefaultArgs> = $Result.GetResult<Prisma.$PayrollDataPayload, S>

  type PayrollDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PayrollDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PayrollDataCountAggregateInputType | true
    }

  export interface PayrollDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayrollData'], meta: { name: 'PayrollData' } }
    /**
     * Find zero or one PayrollData that matches the filter.
     * @param {PayrollDataFindUniqueArgs} args - Arguments to find a PayrollData
     * @example
     * // Get one PayrollData
     * const payrollData = await prisma.payrollData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PayrollDataFindUniqueArgs>(args: SelectSubset<T, PayrollDataFindUniqueArgs<ExtArgs>>): Prisma__PayrollDataClient<$Result.GetResult<Prisma.$PayrollDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PayrollData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PayrollDataFindUniqueOrThrowArgs} args - Arguments to find a PayrollData
     * @example
     * // Get one PayrollData
     * const payrollData = await prisma.payrollData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PayrollDataFindUniqueOrThrowArgs>(args: SelectSubset<T, PayrollDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PayrollDataClient<$Result.GetResult<Prisma.$PayrollDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayrollData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollDataFindFirstArgs} args - Arguments to find a PayrollData
     * @example
     * // Get one PayrollData
     * const payrollData = await prisma.payrollData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PayrollDataFindFirstArgs>(args?: SelectSubset<T, PayrollDataFindFirstArgs<ExtArgs>>): Prisma__PayrollDataClient<$Result.GetResult<Prisma.$PayrollDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayrollData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollDataFindFirstOrThrowArgs} args - Arguments to find a PayrollData
     * @example
     * // Get one PayrollData
     * const payrollData = await prisma.payrollData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PayrollDataFindFirstOrThrowArgs>(args?: SelectSubset<T, PayrollDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__PayrollDataClient<$Result.GetResult<Prisma.$PayrollDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PayrollData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayrollData
     * const payrollData = await prisma.payrollData.findMany()
     * 
     * // Get first 10 PayrollData
     * const payrollData = await prisma.payrollData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payrollDataWithIdOnly = await prisma.payrollData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PayrollDataFindManyArgs>(args?: SelectSubset<T, PayrollDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PayrollData.
     * @param {PayrollDataCreateArgs} args - Arguments to create a PayrollData.
     * @example
     * // Create one PayrollData
     * const PayrollData = await prisma.payrollData.create({
     *   data: {
     *     // ... data to create a PayrollData
     *   }
     * })
     * 
     */
    create<T extends PayrollDataCreateArgs>(args: SelectSubset<T, PayrollDataCreateArgs<ExtArgs>>): Prisma__PayrollDataClient<$Result.GetResult<Prisma.$PayrollDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PayrollData.
     * @param {PayrollDataCreateManyArgs} args - Arguments to create many PayrollData.
     * @example
     * // Create many PayrollData
     * const payrollData = await prisma.payrollData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PayrollDataCreateManyArgs>(args?: SelectSubset<T, PayrollDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PayrollData and returns the data saved in the database.
     * @param {PayrollDataCreateManyAndReturnArgs} args - Arguments to create many PayrollData.
     * @example
     * // Create many PayrollData
     * const payrollData = await prisma.payrollData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PayrollData and only return the `id`
     * const payrollDataWithIdOnly = await prisma.payrollData.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PayrollDataCreateManyAndReturnArgs>(args?: SelectSubset<T, PayrollDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollDataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PayrollData.
     * @param {PayrollDataDeleteArgs} args - Arguments to delete one PayrollData.
     * @example
     * // Delete one PayrollData
     * const PayrollData = await prisma.payrollData.delete({
     *   where: {
     *     // ... filter to delete one PayrollData
     *   }
     * })
     * 
     */
    delete<T extends PayrollDataDeleteArgs>(args: SelectSubset<T, PayrollDataDeleteArgs<ExtArgs>>): Prisma__PayrollDataClient<$Result.GetResult<Prisma.$PayrollDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PayrollData.
     * @param {PayrollDataUpdateArgs} args - Arguments to update one PayrollData.
     * @example
     * // Update one PayrollData
     * const payrollData = await prisma.payrollData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PayrollDataUpdateArgs>(args: SelectSubset<T, PayrollDataUpdateArgs<ExtArgs>>): Prisma__PayrollDataClient<$Result.GetResult<Prisma.$PayrollDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PayrollData.
     * @param {PayrollDataDeleteManyArgs} args - Arguments to filter PayrollData to delete.
     * @example
     * // Delete a few PayrollData
     * const { count } = await prisma.payrollData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PayrollDataDeleteManyArgs>(args?: SelectSubset<T, PayrollDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayrollData
     * const payrollData = await prisma.payrollData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PayrollDataUpdateManyArgs>(args: SelectSubset<T, PayrollDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollData and returns the data updated in the database.
     * @param {PayrollDataUpdateManyAndReturnArgs} args - Arguments to update many PayrollData.
     * @example
     * // Update many PayrollData
     * const payrollData = await prisma.payrollData.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PayrollData and only return the `id`
     * const payrollDataWithIdOnly = await prisma.payrollData.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PayrollDataUpdateManyAndReturnArgs>(args: SelectSubset<T, PayrollDataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollDataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PayrollData.
     * @param {PayrollDataUpsertArgs} args - Arguments to update or create a PayrollData.
     * @example
     * // Update or create a PayrollData
     * const payrollData = await prisma.payrollData.upsert({
     *   create: {
     *     // ... data to create a PayrollData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayrollData we want to update
     *   }
     * })
     */
    upsert<T extends PayrollDataUpsertArgs>(args: SelectSubset<T, PayrollDataUpsertArgs<ExtArgs>>): Prisma__PayrollDataClient<$Result.GetResult<Prisma.$PayrollDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PayrollData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollDataCountArgs} args - Arguments to filter PayrollData to count.
     * @example
     * // Count the number of PayrollData
     * const count = await prisma.payrollData.count({
     *   where: {
     *     // ... the filter for the PayrollData we want to count
     *   }
     * })
    **/
    count<T extends PayrollDataCountArgs>(
      args?: Subset<T, PayrollDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayrollDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayrollData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayrollDataAggregateArgs>(args: Subset<T, PayrollDataAggregateArgs>): Prisma.PrismaPromise<GetPayrollDataAggregateType<T>>

    /**
     * Group by PayrollData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayrollDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayrollDataGroupByArgs['orderBy'] }
        : { orderBy?: PayrollDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayrollDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayrollDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayrollData model
   */
  readonly fields: PayrollDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayrollData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayrollDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PayrollData model
   */
  interface PayrollDataFieldRefs {
    readonly id: FieldRef<"PayrollData", 'String'>
    readonly employeeId: FieldRef<"PayrollData", 'String'>
    readonly month: FieldRef<"PayrollData", 'String'>
    readonly dailyRevenue: FieldRef<"PayrollData", 'Int'>
    readonly monthlyRevenue: FieldRef<"PayrollData", 'Int'>
    readonly serviceRevenue: FieldRef<"PayrollData", 'Int'>
    readonly productRevenue: FieldRef<"PayrollData", 'Int'>
    readonly facialRevenue: FieldRef<"PayrollData", 'Int'>
    readonly washingRevenue: FieldRef<"PayrollData", 'Int'>
    readonly chemicalRevenue: FieldRef<"PayrollData", 'Int'>
    readonly bleachingRevenue: FieldRef<"PayrollData", 'Int'>
    readonly cuttingRevenue: FieldRef<"PayrollData", 'Int'>
    readonly oilTreatmentRevenue: FieldRef<"PayrollData", 'Int'>
    readonly keratinRevenue: FieldRef<"PayrollData", 'Int'>
    readonly spaFootRevenue: FieldRef<"PayrollData", 'Int'>
    readonly nailDesignRevenue: FieldRef<"PayrollData", 'Int'>
    readonly eyebrowThreadingRevenue: FieldRef<"PayrollData", 'Int'>
    readonly kpiAchieved: FieldRef<"PayrollData", 'Boolean'>
    readonly kpiDetails: FieldRef<"PayrollData", 'String'>
    readonly bonus: FieldRef<"PayrollData", 'Int'>
    readonly penalty: FieldRef<"PayrollData", 'Int'>
    readonly advance: FieldRef<"PayrollData", 'Int'>
    readonly calculatedLevel: FieldRef<"PayrollData", 'String'>
    readonly createdAt: FieldRef<"PayrollData", 'DateTime'>
    readonly updatedAt: FieldRef<"PayrollData", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PayrollData findUnique
   */
  export type PayrollDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollData
     */
    select?: PayrollDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollData
     */
    omit?: PayrollDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollDataInclude<ExtArgs> | null
    /**
     * Filter, which PayrollData to fetch.
     */
    where: PayrollDataWhereUniqueInput
  }

  /**
   * PayrollData findUniqueOrThrow
   */
  export type PayrollDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollData
     */
    select?: PayrollDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollData
     */
    omit?: PayrollDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollDataInclude<ExtArgs> | null
    /**
     * Filter, which PayrollData to fetch.
     */
    where: PayrollDataWhereUniqueInput
  }

  /**
   * PayrollData findFirst
   */
  export type PayrollDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollData
     */
    select?: PayrollDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollData
     */
    omit?: PayrollDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollDataInclude<ExtArgs> | null
    /**
     * Filter, which PayrollData to fetch.
     */
    where?: PayrollDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollData to fetch.
     */
    orderBy?: PayrollDataOrderByWithRelationInput | PayrollDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollData.
     */
    cursor?: PayrollDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollData.
     */
    distinct?: PayrollDataScalarFieldEnum | PayrollDataScalarFieldEnum[]
  }

  /**
   * PayrollData findFirstOrThrow
   */
  export type PayrollDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollData
     */
    select?: PayrollDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollData
     */
    omit?: PayrollDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollDataInclude<ExtArgs> | null
    /**
     * Filter, which PayrollData to fetch.
     */
    where?: PayrollDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollData to fetch.
     */
    orderBy?: PayrollDataOrderByWithRelationInput | PayrollDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollData.
     */
    cursor?: PayrollDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollData.
     */
    distinct?: PayrollDataScalarFieldEnum | PayrollDataScalarFieldEnum[]
  }

  /**
   * PayrollData findMany
   */
  export type PayrollDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollData
     */
    select?: PayrollDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollData
     */
    omit?: PayrollDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollDataInclude<ExtArgs> | null
    /**
     * Filter, which PayrollData to fetch.
     */
    where?: PayrollDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollData to fetch.
     */
    orderBy?: PayrollDataOrderByWithRelationInput | PayrollDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayrollData.
     */
    cursor?: PayrollDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollData.
     */
    skip?: number
    distinct?: PayrollDataScalarFieldEnum | PayrollDataScalarFieldEnum[]
  }

  /**
   * PayrollData create
   */
  export type PayrollDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollData
     */
    select?: PayrollDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollData
     */
    omit?: PayrollDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollDataInclude<ExtArgs> | null
    /**
     * The data needed to create a PayrollData.
     */
    data: XOR<PayrollDataCreateInput, PayrollDataUncheckedCreateInput>
  }

  /**
   * PayrollData createMany
   */
  export type PayrollDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayrollData.
     */
    data: PayrollDataCreateManyInput | PayrollDataCreateManyInput[]
  }

  /**
   * PayrollData createManyAndReturn
   */
  export type PayrollDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollData
     */
    select?: PayrollDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollData
     */
    omit?: PayrollDataOmit<ExtArgs> | null
    /**
     * The data used to create many PayrollData.
     */
    data: PayrollDataCreateManyInput | PayrollDataCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayrollData update
   */
  export type PayrollDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollData
     */
    select?: PayrollDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollData
     */
    omit?: PayrollDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollDataInclude<ExtArgs> | null
    /**
     * The data needed to update a PayrollData.
     */
    data: XOR<PayrollDataUpdateInput, PayrollDataUncheckedUpdateInput>
    /**
     * Choose, which PayrollData to update.
     */
    where: PayrollDataWhereUniqueInput
  }

  /**
   * PayrollData updateMany
   */
  export type PayrollDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayrollData.
     */
    data: XOR<PayrollDataUpdateManyMutationInput, PayrollDataUncheckedUpdateManyInput>
    /**
     * Filter which PayrollData to update
     */
    where?: PayrollDataWhereInput
    /**
     * Limit how many PayrollData to update.
     */
    limit?: number
  }

  /**
   * PayrollData updateManyAndReturn
   */
  export type PayrollDataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollData
     */
    select?: PayrollDataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollData
     */
    omit?: PayrollDataOmit<ExtArgs> | null
    /**
     * The data used to update PayrollData.
     */
    data: XOR<PayrollDataUpdateManyMutationInput, PayrollDataUncheckedUpdateManyInput>
    /**
     * Filter which PayrollData to update
     */
    where?: PayrollDataWhereInput
    /**
     * Limit how many PayrollData to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollDataIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayrollData upsert
   */
  export type PayrollDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollData
     */
    select?: PayrollDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollData
     */
    omit?: PayrollDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollDataInclude<ExtArgs> | null
    /**
     * The filter to search for the PayrollData to update in case it exists.
     */
    where: PayrollDataWhereUniqueInput
    /**
     * In case the PayrollData found by the `where` argument doesn't exist, create a new PayrollData with this data.
     */
    create: XOR<PayrollDataCreateInput, PayrollDataUncheckedCreateInput>
    /**
     * In case the PayrollData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayrollDataUpdateInput, PayrollDataUncheckedUpdateInput>
  }

  /**
   * PayrollData delete
   */
  export type PayrollDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollData
     */
    select?: PayrollDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollData
     */
    omit?: PayrollDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollDataInclude<ExtArgs> | null
    /**
     * Filter which PayrollData to delete.
     */
    where: PayrollDataWhereUniqueInput
  }

  /**
   * PayrollData deleteMany
   */
  export type PayrollDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollData to delete
     */
    where?: PayrollDataWhereInput
    /**
     * Limit how many PayrollData to delete.
     */
    limit?: number
  }

  /**
   * PayrollData without action
   */
  export type PayrollDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollData
     */
    select?: PayrollDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollData
     */
    omit?: PayrollDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollDataInclude<ExtArgs> | null
  }


  /**
   * Model DailyCommissionEntry
   */

  export type AggregateDailyCommissionEntry = {
    _count: DailyCommissionEntryCountAggregateOutputType | null
    _avg: DailyCommissionEntryAvgAggregateOutputType | null
    _sum: DailyCommissionEntrySumAggregateOutputType | null
    _min: DailyCommissionEntryMinAggregateOutputType | null
    _max: DailyCommissionEntryMaxAggregateOutputType | null
  }

  export type DailyCommissionEntryAvgAggregateOutputType = {
    quantity: number | null
    timesPerformed: number | null
    timesSold: number | null
    revenueBeforeDiscount: number | null
    revenueAfterDiscount: number | null
    commissionAmount: number | null
  }

  export type DailyCommissionEntrySumAggregateOutputType = {
    quantity: number | null
    timesPerformed: number | null
    timesSold: number | null
    revenueBeforeDiscount: number | null
    revenueAfterDiscount: number | null
    commissionAmount: number | null
  }

  export type DailyCommissionEntryMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    date: Date | null
    serviceCode: string | null
    serviceName: string | null
    serviceGroup: string | null
    serviceType: $Enums.ServiceType | null
    quantity: number | null
    timesPerformed: number | null
    timesSold: number | null
    revenueBeforeDiscount: number | null
    revenueAfterDiscount: number | null
    commissionAmount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DailyCommissionEntryMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    date: Date | null
    serviceCode: string | null
    serviceName: string | null
    serviceGroup: string | null
    serviceType: $Enums.ServiceType | null
    quantity: number | null
    timesPerformed: number | null
    timesSold: number | null
    revenueBeforeDiscount: number | null
    revenueAfterDiscount: number | null
    commissionAmount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DailyCommissionEntryCountAggregateOutputType = {
    id: number
    employeeId: number
    date: number
    serviceCode: number
    serviceName: number
    serviceGroup: number
    serviceType: number
    quantity: number
    timesPerformed: number
    timesSold: number
    revenueBeforeDiscount: number
    revenueAfterDiscount: number
    commissionAmount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DailyCommissionEntryAvgAggregateInputType = {
    quantity?: true
    timesPerformed?: true
    timesSold?: true
    revenueBeforeDiscount?: true
    revenueAfterDiscount?: true
    commissionAmount?: true
  }

  export type DailyCommissionEntrySumAggregateInputType = {
    quantity?: true
    timesPerformed?: true
    timesSold?: true
    revenueBeforeDiscount?: true
    revenueAfterDiscount?: true
    commissionAmount?: true
  }

  export type DailyCommissionEntryMinAggregateInputType = {
    id?: true
    employeeId?: true
    date?: true
    serviceCode?: true
    serviceName?: true
    serviceGroup?: true
    serviceType?: true
    quantity?: true
    timesPerformed?: true
    timesSold?: true
    revenueBeforeDiscount?: true
    revenueAfterDiscount?: true
    commissionAmount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DailyCommissionEntryMaxAggregateInputType = {
    id?: true
    employeeId?: true
    date?: true
    serviceCode?: true
    serviceName?: true
    serviceGroup?: true
    serviceType?: true
    quantity?: true
    timesPerformed?: true
    timesSold?: true
    revenueBeforeDiscount?: true
    revenueAfterDiscount?: true
    commissionAmount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DailyCommissionEntryCountAggregateInputType = {
    id?: true
    employeeId?: true
    date?: true
    serviceCode?: true
    serviceName?: true
    serviceGroup?: true
    serviceType?: true
    quantity?: true
    timesPerformed?: true
    timesSold?: true
    revenueBeforeDiscount?: true
    revenueAfterDiscount?: true
    commissionAmount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DailyCommissionEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyCommissionEntry to aggregate.
     */
    where?: DailyCommissionEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyCommissionEntries to fetch.
     */
    orderBy?: DailyCommissionEntryOrderByWithRelationInput | DailyCommissionEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DailyCommissionEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyCommissionEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyCommissionEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyCommissionEntries
    **/
    _count?: true | DailyCommissionEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DailyCommissionEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DailyCommissionEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyCommissionEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyCommissionEntryMaxAggregateInputType
  }

  export type GetDailyCommissionEntryAggregateType<T extends DailyCommissionEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyCommissionEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyCommissionEntry[P]>
      : GetScalarType<T[P], AggregateDailyCommissionEntry[P]>
  }




  export type DailyCommissionEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyCommissionEntryWhereInput
    orderBy?: DailyCommissionEntryOrderByWithAggregationInput | DailyCommissionEntryOrderByWithAggregationInput[]
    by: DailyCommissionEntryScalarFieldEnum[] | DailyCommissionEntryScalarFieldEnum
    having?: DailyCommissionEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyCommissionEntryCountAggregateInputType | true
    _avg?: DailyCommissionEntryAvgAggregateInputType
    _sum?: DailyCommissionEntrySumAggregateInputType
    _min?: DailyCommissionEntryMinAggregateInputType
    _max?: DailyCommissionEntryMaxAggregateInputType
  }

  export type DailyCommissionEntryGroupByOutputType = {
    id: string
    employeeId: string
    date: Date
    serviceCode: string
    serviceName: string
    serviceGroup: string
    serviceType: $Enums.ServiceType
    quantity: number
    timesPerformed: number
    timesSold: number
    revenueBeforeDiscount: number
    revenueAfterDiscount: number
    commissionAmount: number
    createdAt: Date
    updatedAt: Date
    _count: DailyCommissionEntryCountAggregateOutputType | null
    _avg: DailyCommissionEntryAvgAggregateOutputType | null
    _sum: DailyCommissionEntrySumAggregateOutputType | null
    _min: DailyCommissionEntryMinAggregateOutputType | null
    _max: DailyCommissionEntryMaxAggregateOutputType | null
  }

  type GetDailyCommissionEntryGroupByPayload<T extends DailyCommissionEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DailyCommissionEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyCommissionEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyCommissionEntryGroupByOutputType[P]>
            : GetScalarType<T[P], DailyCommissionEntryGroupByOutputType[P]>
        }
      >
    >


  export type DailyCommissionEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    date?: boolean
    serviceCode?: boolean
    serviceName?: boolean
    serviceGroup?: boolean
    serviceType?: boolean
    quantity?: boolean
    timesPerformed?: boolean
    timesSold?: boolean
    revenueBeforeDiscount?: boolean
    revenueAfterDiscount?: boolean
    commissionAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyCommissionEntry"]>

  export type DailyCommissionEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    date?: boolean
    serviceCode?: boolean
    serviceName?: boolean
    serviceGroup?: boolean
    serviceType?: boolean
    quantity?: boolean
    timesPerformed?: boolean
    timesSold?: boolean
    revenueBeforeDiscount?: boolean
    revenueAfterDiscount?: boolean
    commissionAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyCommissionEntry"]>

  export type DailyCommissionEntrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    date?: boolean
    serviceCode?: boolean
    serviceName?: boolean
    serviceGroup?: boolean
    serviceType?: boolean
    quantity?: boolean
    timesPerformed?: boolean
    timesSold?: boolean
    revenueBeforeDiscount?: boolean
    revenueAfterDiscount?: boolean
    commissionAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyCommissionEntry"]>

  export type DailyCommissionEntrySelectScalar = {
    id?: boolean
    employeeId?: boolean
    date?: boolean
    serviceCode?: boolean
    serviceName?: boolean
    serviceGroup?: boolean
    serviceType?: boolean
    quantity?: boolean
    timesPerformed?: boolean
    timesSold?: boolean
    revenueBeforeDiscount?: boolean
    revenueAfterDiscount?: boolean
    commissionAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DailyCommissionEntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "date" | "serviceCode" | "serviceName" | "serviceGroup" | "serviceType" | "quantity" | "timesPerformed" | "timesSold" | "revenueBeforeDiscount" | "revenueAfterDiscount" | "commissionAmount" | "createdAt" | "updatedAt", ExtArgs["result"]["dailyCommissionEntry"]>
  export type DailyCommissionEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type DailyCommissionEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type DailyCommissionEntryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $DailyCommissionEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DailyCommissionEntry"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      date: Date
      serviceCode: string
      serviceName: string
      serviceGroup: string
      serviceType: $Enums.ServiceType
      quantity: number
      timesPerformed: number
      timesSold: number
      revenueBeforeDiscount: number
      revenueAfterDiscount: number
      commissionAmount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dailyCommissionEntry"]>
    composites: {}
  }

  type DailyCommissionEntryGetPayload<S extends boolean | null | undefined | DailyCommissionEntryDefaultArgs> = $Result.GetResult<Prisma.$DailyCommissionEntryPayload, S>

  type DailyCommissionEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DailyCommissionEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DailyCommissionEntryCountAggregateInputType | true
    }

  export interface DailyCommissionEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailyCommissionEntry'], meta: { name: 'DailyCommissionEntry' } }
    /**
     * Find zero or one DailyCommissionEntry that matches the filter.
     * @param {DailyCommissionEntryFindUniqueArgs} args - Arguments to find a DailyCommissionEntry
     * @example
     * // Get one DailyCommissionEntry
     * const dailyCommissionEntry = await prisma.dailyCommissionEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DailyCommissionEntryFindUniqueArgs>(args: SelectSubset<T, DailyCommissionEntryFindUniqueArgs<ExtArgs>>): Prisma__DailyCommissionEntryClient<$Result.GetResult<Prisma.$DailyCommissionEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DailyCommissionEntry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DailyCommissionEntryFindUniqueOrThrowArgs} args - Arguments to find a DailyCommissionEntry
     * @example
     * // Get one DailyCommissionEntry
     * const dailyCommissionEntry = await prisma.dailyCommissionEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DailyCommissionEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, DailyCommissionEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DailyCommissionEntryClient<$Result.GetResult<Prisma.$DailyCommissionEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyCommissionEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyCommissionEntryFindFirstArgs} args - Arguments to find a DailyCommissionEntry
     * @example
     * // Get one DailyCommissionEntry
     * const dailyCommissionEntry = await prisma.dailyCommissionEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DailyCommissionEntryFindFirstArgs>(args?: SelectSubset<T, DailyCommissionEntryFindFirstArgs<ExtArgs>>): Prisma__DailyCommissionEntryClient<$Result.GetResult<Prisma.$DailyCommissionEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyCommissionEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyCommissionEntryFindFirstOrThrowArgs} args - Arguments to find a DailyCommissionEntry
     * @example
     * // Get one DailyCommissionEntry
     * const dailyCommissionEntry = await prisma.dailyCommissionEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DailyCommissionEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, DailyCommissionEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__DailyCommissionEntryClient<$Result.GetResult<Prisma.$DailyCommissionEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DailyCommissionEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyCommissionEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyCommissionEntries
     * const dailyCommissionEntries = await prisma.dailyCommissionEntry.findMany()
     * 
     * // Get first 10 DailyCommissionEntries
     * const dailyCommissionEntries = await prisma.dailyCommissionEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyCommissionEntryWithIdOnly = await prisma.dailyCommissionEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DailyCommissionEntryFindManyArgs>(args?: SelectSubset<T, DailyCommissionEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyCommissionEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DailyCommissionEntry.
     * @param {DailyCommissionEntryCreateArgs} args - Arguments to create a DailyCommissionEntry.
     * @example
     * // Create one DailyCommissionEntry
     * const DailyCommissionEntry = await prisma.dailyCommissionEntry.create({
     *   data: {
     *     // ... data to create a DailyCommissionEntry
     *   }
     * })
     * 
     */
    create<T extends DailyCommissionEntryCreateArgs>(args: SelectSubset<T, DailyCommissionEntryCreateArgs<ExtArgs>>): Prisma__DailyCommissionEntryClient<$Result.GetResult<Prisma.$DailyCommissionEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DailyCommissionEntries.
     * @param {DailyCommissionEntryCreateManyArgs} args - Arguments to create many DailyCommissionEntries.
     * @example
     * // Create many DailyCommissionEntries
     * const dailyCommissionEntry = await prisma.dailyCommissionEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DailyCommissionEntryCreateManyArgs>(args?: SelectSubset<T, DailyCommissionEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DailyCommissionEntries and returns the data saved in the database.
     * @param {DailyCommissionEntryCreateManyAndReturnArgs} args - Arguments to create many DailyCommissionEntries.
     * @example
     * // Create many DailyCommissionEntries
     * const dailyCommissionEntry = await prisma.dailyCommissionEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DailyCommissionEntries and only return the `id`
     * const dailyCommissionEntryWithIdOnly = await prisma.dailyCommissionEntry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DailyCommissionEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, DailyCommissionEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyCommissionEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DailyCommissionEntry.
     * @param {DailyCommissionEntryDeleteArgs} args - Arguments to delete one DailyCommissionEntry.
     * @example
     * // Delete one DailyCommissionEntry
     * const DailyCommissionEntry = await prisma.dailyCommissionEntry.delete({
     *   where: {
     *     // ... filter to delete one DailyCommissionEntry
     *   }
     * })
     * 
     */
    delete<T extends DailyCommissionEntryDeleteArgs>(args: SelectSubset<T, DailyCommissionEntryDeleteArgs<ExtArgs>>): Prisma__DailyCommissionEntryClient<$Result.GetResult<Prisma.$DailyCommissionEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DailyCommissionEntry.
     * @param {DailyCommissionEntryUpdateArgs} args - Arguments to update one DailyCommissionEntry.
     * @example
     * // Update one DailyCommissionEntry
     * const dailyCommissionEntry = await prisma.dailyCommissionEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DailyCommissionEntryUpdateArgs>(args: SelectSubset<T, DailyCommissionEntryUpdateArgs<ExtArgs>>): Prisma__DailyCommissionEntryClient<$Result.GetResult<Prisma.$DailyCommissionEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DailyCommissionEntries.
     * @param {DailyCommissionEntryDeleteManyArgs} args - Arguments to filter DailyCommissionEntries to delete.
     * @example
     * // Delete a few DailyCommissionEntries
     * const { count } = await prisma.dailyCommissionEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DailyCommissionEntryDeleteManyArgs>(args?: SelectSubset<T, DailyCommissionEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyCommissionEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyCommissionEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyCommissionEntries
     * const dailyCommissionEntry = await prisma.dailyCommissionEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DailyCommissionEntryUpdateManyArgs>(args: SelectSubset<T, DailyCommissionEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyCommissionEntries and returns the data updated in the database.
     * @param {DailyCommissionEntryUpdateManyAndReturnArgs} args - Arguments to update many DailyCommissionEntries.
     * @example
     * // Update many DailyCommissionEntries
     * const dailyCommissionEntry = await prisma.dailyCommissionEntry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DailyCommissionEntries and only return the `id`
     * const dailyCommissionEntryWithIdOnly = await prisma.dailyCommissionEntry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DailyCommissionEntryUpdateManyAndReturnArgs>(args: SelectSubset<T, DailyCommissionEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyCommissionEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DailyCommissionEntry.
     * @param {DailyCommissionEntryUpsertArgs} args - Arguments to update or create a DailyCommissionEntry.
     * @example
     * // Update or create a DailyCommissionEntry
     * const dailyCommissionEntry = await prisma.dailyCommissionEntry.upsert({
     *   create: {
     *     // ... data to create a DailyCommissionEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyCommissionEntry we want to update
     *   }
     * })
     */
    upsert<T extends DailyCommissionEntryUpsertArgs>(args: SelectSubset<T, DailyCommissionEntryUpsertArgs<ExtArgs>>): Prisma__DailyCommissionEntryClient<$Result.GetResult<Prisma.$DailyCommissionEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DailyCommissionEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyCommissionEntryCountArgs} args - Arguments to filter DailyCommissionEntries to count.
     * @example
     * // Count the number of DailyCommissionEntries
     * const count = await prisma.dailyCommissionEntry.count({
     *   where: {
     *     // ... the filter for the DailyCommissionEntries we want to count
     *   }
     * })
    **/
    count<T extends DailyCommissionEntryCountArgs>(
      args?: Subset<T, DailyCommissionEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyCommissionEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyCommissionEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyCommissionEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyCommissionEntryAggregateArgs>(args: Subset<T, DailyCommissionEntryAggregateArgs>): Prisma.PrismaPromise<GetDailyCommissionEntryAggregateType<T>>

    /**
     * Group by DailyCommissionEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyCommissionEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyCommissionEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyCommissionEntryGroupByArgs['orderBy'] }
        : { orderBy?: DailyCommissionEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyCommissionEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyCommissionEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DailyCommissionEntry model
   */
  readonly fields: DailyCommissionEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyCommissionEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DailyCommissionEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DailyCommissionEntry model
   */
  interface DailyCommissionEntryFieldRefs {
    readonly id: FieldRef<"DailyCommissionEntry", 'String'>
    readonly employeeId: FieldRef<"DailyCommissionEntry", 'String'>
    readonly date: FieldRef<"DailyCommissionEntry", 'DateTime'>
    readonly serviceCode: FieldRef<"DailyCommissionEntry", 'String'>
    readonly serviceName: FieldRef<"DailyCommissionEntry", 'String'>
    readonly serviceGroup: FieldRef<"DailyCommissionEntry", 'String'>
    readonly serviceType: FieldRef<"DailyCommissionEntry", 'ServiceType'>
    readonly quantity: FieldRef<"DailyCommissionEntry", 'Int'>
    readonly timesPerformed: FieldRef<"DailyCommissionEntry", 'Int'>
    readonly timesSold: FieldRef<"DailyCommissionEntry", 'Int'>
    readonly revenueBeforeDiscount: FieldRef<"DailyCommissionEntry", 'Int'>
    readonly revenueAfterDiscount: FieldRef<"DailyCommissionEntry", 'Int'>
    readonly commissionAmount: FieldRef<"DailyCommissionEntry", 'Int'>
    readonly createdAt: FieldRef<"DailyCommissionEntry", 'DateTime'>
    readonly updatedAt: FieldRef<"DailyCommissionEntry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DailyCommissionEntry findUnique
   */
  export type DailyCommissionEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCommissionEntry
     */
    select?: DailyCommissionEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyCommissionEntry
     */
    omit?: DailyCommissionEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCommissionEntryInclude<ExtArgs> | null
    /**
     * Filter, which DailyCommissionEntry to fetch.
     */
    where: DailyCommissionEntryWhereUniqueInput
  }

  /**
   * DailyCommissionEntry findUniqueOrThrow
   */
  export type DailyCommissionEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCommissionEntry
     */
    select?: DailyCommissionEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyCommissionEntry
     */
    omit?: DailyCommissionEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCommissionEntryInclude<ExtArgs> | null
    /**
     * Filter, which DailyCommissionEntry to fetch.
     */
    where: DailyCommissionEntryWhereUniqueInput
  }

  /**
   * DailyCommissionEntry findFirst
   */
  export type DailyCommissionEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCommissionEntry
     */
    select?: DailyCommissionEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyCommissionEntry
     */
    omit?: DailyCommissionEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCommissionEntryInclude<ExtArgs> | null
    /**
     * Filter, which DailyCommissionEntry to fetch.
     */
    where?: DailyCommissionEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyCommissionEntries to fetch.
     */
    orderBy?: DailyCommissionEntryOrderByWithRelationInput | DailyCommissionEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyCommissionEntries.
     */
    cursor?: DailyCommissionEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyCommissionEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyCommissionEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyCommissionEntries.
     */
    distinct?: DailyCommissionEntryScalarFieldEnum | DailyCommissionEntryScalarFieldEnum[]
  }

  /**
   * DailyCommissionEntry findFirstOrThrow
   */
  export type DailyCommissionEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCommissionEntry
     */
    select?: DailyCommissionEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyCommissionEntry
     */
    omit?: DailyCommissionEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCommissionEntryInclude<ExtArgs> | null
    /**
     * Filter, which DailyCommissionEntry to fetch.
     */
    where?: DailyCommissionEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyCommissionEntries to fetch.
     */
    orderBy?: DailyCommissionEntryOrderByWithRelationInput | DailyCommissionEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyCommissionEntries.
     */
    cursor?: DailyCommissionEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyCommissionEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyCommissionEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyCommissionEntries.
     */
    distinct?: DailyCommissionEntryScalarFieldEnum | DailyCommissionEntryScalarFieldEnum[]
  }

  /**
   * DailyCommissionEntry findMany
   */
  export type DailyCommissionEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCommissionEntry
     */
    select?: DailyCommissionEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyCommissionEntry
     */
    omit?: DailyCommissionEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCommissionEntryInclude<ExtArgs> | null
    /**
     * Filter, which DailyCommissionEntries to fetch.
     */
    where?: DailyCommissionEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyCommissionEntries to fetch.
     */
    orderBy?: DailyCommissionEntryOrderByWithRelationInput | DailyCommissionEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyCommissionEntries.
     */
    cursor?: DailyCommissionEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyCommissionEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyCommissionEntries.
     */
    skip?: number
    distinct?: DailyCommissionEntryScalarFieldEnum | DailyCommissionEntryScalarFieldEnum[]
  }

  /**
   * DailyCommissionEntry create
   */
  export type DailyCommissionEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCommissionEntry
     */
    select?: DailyCommissionEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyCommissionEntry
     */
    omit?: DailyCommissionEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCommissionEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a DailyCommissionEntry.
     */
    data: XOR<DailyCommissionEntryCreateInput, DailyCommissionEntryUncheckedCreateInput>
  }

  /**
   * DailyCommissionEntry createMany
   */
  export type DailyCommissionEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DailyCommissionEntries.
     */
    data: DailyCommissionEntryCreateManyInput | DailyCommissionEntryCreateManyInput[]
  }

  /**
   * DailyCommissionEntry createManyAndReturn
   */
  export type DailyCommissionEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCommissionEntry
     */
    select?: DailyCommissionEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyCommissionEntry
     */
    omit?: DailyCommissionEntryOmit<ExtArgs> | null
    /**
     * The data used to create many DailyCommissionEntries.
     */
    data: DailyCommissionEntryCreateManyInput | DailyCommissionEntryCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCommissionEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DailyCommissionEntry update
   */
  export type DailyCommissionEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCommissionEntry
     */
    select?: DailyCommissionEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyCommissionEntry
     */
    omit?: DailyCommissionEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCommissionEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a DailyCommissionEntry.
     */
    data: XOR<DailyCommissionEntryUpdateInput, DailyCommissionEntryUncheckedUpdateInput>
    /**
     * Choose, which DailyCommissionEntry to update.
     */
    where: DailyCommissionEntryWhereUniqueInput
  }

  /**
   * DailyCommissionEntry updateMany
   */
  export type DailyCommissionEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DailyCommissionEntries.
     */
    data: XOR<DailyCommissionEntryUpdateManyMutationInput, DailyCommissionEntryUncheckedUpdateManyInput>
    /**
     * Filter which DailyCommissionEntries to update
     */
    where?: DailyCommissionEntryWhereInput
    /**
     * Limit how many DailyCommissionEntries to update.
     */
    limit?: number
  }

  /**
   * DailyCommissionEntry updateManyAndReturn
   */
  export type DailyCommissionEntryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCommissionEntry
     */
    select?: DailyCommissionEntrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyCommissionEntry
     */
    omit?: DailyCommissionEntryOmit<ExtArgs> | null
    /**
     * The data used to update DailyCommissionEntries.
     */
    data: XOR<DailyCommissionEntryUpdateManyMutationInput, DailyCommissionEntryUncheckedUpdateManyInput>
    /**
     * Filter which DailyCommissionEntries to update
     */
    where?: DailyCommissionEntryWhereInput
    /**
     * Limit how many DailyCommissionEntries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCommissionEntryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DailyCommissionEntry upsert
   */
  export type DailyCommissionEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCommissionEntry
     */
    select?: DailyCommissionEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyCommissionEntry
     */
    omit?: DailyCommissionEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCommissionEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the DailyCommissionEntry to update in case it exists.
     */
    where: DailyCommissionEntryWhereUniqueInput
    /**
     * In case the DailyCommissionEntry found by the `where` argument doesn't exist, create a new DailyCommissionEntry with this data.
     */
    create: XOR<DailyCommissionEntryCreateInput, DailyCommissionEntryUncheckedCreateInput>
    /**
     * In case the DailyCommissionEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DailyCommissionEntryUpdateInput, DailyCommissionEntryUncheckedUpdateInput>
  }

  /**
   * DailyCommissionEntry delete
   */
  export type DailyCommissionEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCommissionEntry
     */
    select?: DailyCommissionEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyCommissionEntry
     */
    omit?: DailyCommissionEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCommissionEntryInclude<ExtArgs> | null
    /**
     * Filter which DailyCommissionEntry to delete.
     */
    where: DailyCommissionEntryWhereUniqueInput
  }

  /**
   * DailyCommissionEntry deleteMany
   */
  export type DailyCommissionEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyCommissionEntries to delete
     */
    where?: DailyCommissionEntryWhereInput
    /**
     * Limit how many DailyCommissionEntries to delete.
     */
    limit?: number
  }

  /**
   * DailyCommissionEntry without action
   */
  export type DailyCommissionEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyCommissionEntry
     */
    select?: DailyCommissionEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyCommissionEntry
     */
    omit?: DailyCommissionEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyCommissionEntryInclude<ExtArgs> | null
  }


  /**
   * Model SystemSettings
   */

  export type AggregateSystemSettings = {
    _count: SystemSettingsCountAggregateOutputType | null
    _min: SystemSettingsMinAggregateOutputType | null
    _max: SystemSettingsMaxAggregateOutputType | null
  }

  export type SystemSettingsMinAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemSettingsMaxAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemSettingsCountAggregateOutputType = {
    id: number
    key: number
    value: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SystemSettingsMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemSettingsMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemSettingsCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to aggregate.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemSettings
    **/
    _count?: true | SystemSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemSettingsMaxAggregateInputType
  }

  export type GetSystemSettingsAggregateType<T extends SystemSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemSettings[P]>
      : GetScalarType<T[P], AggregateSystemSettings[P]>
  }




  export type SystemSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemSettingsWhereInput
    orderBy?: SystemSettingsOrderByWithAggregationInput | SystemSettingsOrderByWithAggregationInput[]
    by: SystemSettingsScalarFieldEnum[] | SystemSettingsScalarFieldEnum
    having?: SystemSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemSettingsCountAggregateInputType | true
    _min?: SystemSettingsMinAggregateInputType
    _max?: SystemSettingsMaxAggregateInputType
  }

  export type SystemSettingsGroupByOutputType = {
    id: string
    key: string
    value: string
    createdAt: Date
    updatedAt: Date
    _count: SystemSettingsCountAggregateOutputType | null
    _min: SystemSettingsMinAggregateOutputType | null
    _max: SystemSettingsMaxAggregateOutputType | null
  }

  type GetSystemSettingsGroupByPayload<T extends SystemSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], SystemSettingsGroupByOutputType[P]>
        }
      >
    >


  export type SystemSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSettings"]>

  export type SystemSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSettings"]>

  export type SystemSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSettings"]>

  export type SystemSettingsSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SystemSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "value" | "createdAt" | "updatedAt", ExtArgs["result"]["systemSettings"]>

  export type $SystemSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemSettings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["systemSettings"]>
    composites: {}
  }

  type SystemSettingsGetPayload<S extends boolean | null | undefined | SystemSettingsDefaultArgs> = $Result.GetResult<Prisma.$SystemSettingsPayload, S>

  type SystemSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemSettingsCountAggregateInputType | true
    }

  export interface SystemSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemSettings'], meta: { name: 'SystemSettings' } }
    /**
     * Find zero or one SystemSettings that matches the filter.
     * @param {SystemSettingsFindUniqueArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemSettingsFindUniqueArgs>(args: SelectSubset<T, SystemSettingsFindUniqueArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemSettingsFindUniqueOrThrowArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindFirstArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemSettingsFindFirstArgs>(args?: SelectSubset<T, SystemSettingsFindFirstArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindFirstOrThrowArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemSettings
     * const systemSettings = await prisma.systemSettings.findMany()
     * 
     * // Get first 10 SystemSettings
     * const systemSettings = await prisma.systemSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemSettingsFindManyArgs>(args?: SelectSubset<T, SystemSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemSettings.
     * @param {SystemSettingsCreateArgs} args - Arguments to create a SystemSettings.
     * @example
     * // Create one SystemSettings
     * const SystemSettings = await prisma.systemSettings.create({
     *   data: {
     *     // ... data to create a SystemSettings
     *   }
     * })
     * 
     */
    create<T extends SystemSettingsCreateArgs>(args: SelectSubset<T, SystemSettingsCreateArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemSettings.
     * @param {SystemSettingsCreateManyArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSettings = await prisma.systemSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemSettingsCreateManyArgs>(args?: SelectSubset<T, SystemSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemSettings and returns the data saved in the database.
     * @param {SystemSettingsCreateManyAndReturnArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSettings = await prisma.systemSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemSettings and only return the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemSettings.
     * @param {SystemSettingsDeleteArgs} args - Arguments to delete one SystemSettings.
     * @example
     * // Delete one SystemSettings
     * const SystemSettings = await prisma.systemSettings.delete({
     *   where: {
     *     // ... filter to delete one SystemSettings
     *   }
     * })
     * 
     */
    delete<T extends SystemSettingsDeleteArgs>(args: SelectSubset<T, SystemSettingsDeleteArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemSettings.
     * @param {SystemSettingsUpdateArgs} args - Arguments to update one SystemSettings.
     * @example
     * // Update one SystemSettings
     * const systemSettings = await prisma.systemSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemSettingsUpdateArgs>(args: SelectSubset<T, SystemSettingsUpdateArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemSettings.
     * @param {SystemSettingsDeleteManyArgs} args - Arguments to filter SystemSettings to delete.
     * @example
     * // Delete a few SystemSettings
     * const { count } = await prisma.systemSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemSettingsDeleteManyArgs>(args?: SelectSubset<T, SystemSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemSettings
     * const systemSettings = await prisma.systemSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemSettingsUpdateManyArgs>(args: SelectSubset<T, SystemSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings and returns the data updated in the database.
     * @param {SystemSettingsUpdateManyAndReturnArgs} args - Arguments to update many SystemSettings.
     * @example
     * // Update many SystemSettings
     * const systemSettings = await prisma.systemSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemSettings and only return the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemSettings.
     * @param {SystemSettingsUpsertArgs} args - Arguments to update or create a SystemSettings.
     * @example
     * // Update or create a SystemSettings
     * const systemSettings = await prisma.systemSettings.upsert({
     *   create: {
     *     // ... data to create a SystemSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemSettings we want to update
     *   }
     * })
     */
    upsert<T extends SystemSettingsUpsertArgs>(args: SelectSubset<T, SystemSettingsUpsertArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsCountArgs} args - Arguments to filter SystemSettings to count.
     * @example
     * // Count the number of SystemSettings
     * const count = await prisma.systemSettings.count({
     *   where: {
     *     // ... the filter for the SystemSettings we want to count
     *   }
     * })
    **/
    count<T extends SystemSettingsCountArgs>(
      args?: Subset<T, SystemSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemSettingsAggregateArgs>(args: Subset<T, SystemSettingsAggregateArgs>): Prisma.PrismaPromise<GetSystemSettingsAggregateType<T>>

    /**
     * Group by SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemSettingsGroupByArgs['orderBy'] }
        : { orderBy?: SystemSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemSettings model
   */
  readonly fields: SystemSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemSettings model
   */
  interface SystemSettingsFieldRefs {
    readonly id: FieldRef<"SystemSettings", 'String'>
    readonly key: FieldRef<"SystemSettings", 'String'>
    readonly value: FieldRef<"SystemSettings", 'String'>
    readonly createdAt: FieldRef<"SystemSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"SystemSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemSettings findUnique
   */
  export type SystemSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings findUniqueOrThrow
   */
  export type SystemSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings findFirst
   */
  export type SystemSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings findFirstOrThrow
   */
  export type SystemSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings findMany
   */
  export type SystemSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings create
   */
  export type SystemSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The data needed to create a SystemSettings.
     */
    data: XOR<SystemSettingsCreateInput, SystemSettingsUncheckedCreateInput>
  }

  /**
   * SystemSettings createMany
   */
  export type SystemSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingsCreateManyInput | SystemSettingsCreateManyInput[]
  }

  /**
   * SystemSettings createManyAndReturn
   */
  export type SystemSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingsCreateManyInput | SystemSettingsCreateManyInput[]
  }

  /**
   * SystemSettings update
   */
  export type SystemSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The data needed to update a SystemSettings.
     */
    data: XOR<SystemSettingsUpdateInput, SystemSettingsUncheckedUpdateInput>
    /**
     * Choose, which SystemSettings to update.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings updateMany
   */
  export type SystemSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingsUpdateManyMutationInput, SystemSettingsUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingsWhereInput
    /**
     * Limit how many SystemSettings to update.
     */
    limit?: number
  }

  /**
   * SystemSettings updateManyAndReturn
   */
  export type SystemSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingsUpdateManyMutationInput, SystemSettingsUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingsWhereInput
    /**
     * Limit how many SystemSettings to update.
     */
    limit?: number
  }

  /**
   * SystemSettings upsert
   */
  export type SystemSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The filter to search for the SystemSettings to update in case it exists.
     */
    where: SystemSettingsWhereUniqueInput
    /**
     * In case the SystemSettings found by the `where` argument doesn't exist, create a new SystemSettings with this data.
     */
    create: XOR<SystemSettingsCreateInput, SystemSettingsUncheckedCreateInput>
    /**
     * In case the SystemSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemSettingsUpdateInput, SystemSettingsUncheckedUpdateInput>
  }

  /**
   * SystemSettings delete
   */
  export type SystemSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter which SystemSettings to delete.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings deleteMany
   */
  export type SystemSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to delete
     */
    where?: SystemSettingsWhereInput
    /**
     * Limit how many SystemSettings to delete.
     */
    limit?: number
  }

  /**
   * SystemSettings without action
   */
  export type SystemSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    oldData: string | null
    newData: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    oldData: string | null
    newData: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    entity: number
    entityId: number
    oldData: number
    newData: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    oldData?: true
    newData?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    oldData?: true
    newData?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    oldData?: true
    newData?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string | null
    action: string
    entity: string
    entityId: string | null
    oldData: string | null
    newData: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldData?: boolean
    newData?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldData?: boolean
    newData?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldData?: boolean
    newData?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldData?: boolean
    newData?: boolean
    createdAt?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "entity" | "entityId" | "oldData" | "newData" | "createdAt", ExtArgs["result"]["auditLog"]>

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      action: string
      entity: string
      entityId: string | null
      oldData: string | null
      newData: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entity: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly oldData: FieldRef<"AuditLog", 'String'>
    readonly newData: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    position: 'position',
    department: 'department',
    employeeGroup: 'employeeGroup',
    basicSalary: 'basicSalary',
    allowance: 'allowance',
    currentLevel: 'currentLevel',
    isNewEmployee: 'isNewEmployee',
    isActive: 'isActive',
    hireDate: 'hireDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const PayrollDataScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    month: 'month',
    dailyRevenue: 'dailyRevenue',
    monthlyRevenue: 'monthlyRevenue',
    serviceRevenue: 'serviceRevenue',
    productRevenue: 'productRevenue',
    facialRevenue: 'facialRevenue',
    washingRevenue: 'washingRevenue',
    chemicalRevenue: 'chemicalRevenue',
    bleachingRevenue: 'bleachingRevenue',
    cuttingRevenue: 'cuttingRevenue',
    oilTreatmentRevenue: 'oilTreatmentRevenue',
    keratinRevenue: 'keratinRevenue',
    spaFootRevenue: 'spaFootRevenue',
    nailDesignRevenue: 'nailDesignRevenue',
    eyebrowThreadingRevenue: 'eyebrowThreadingRevenue',
    kpiAchieved: 'kpiAchieved',
    kpiDetails: 'kpiDetails',
    bonus: 'bonus',
    penalty: 'penalty',
    advance: 'advance',
    calculatedLevel: 'calculatedLevel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PayrollDataScalarFieldEnum = (typeof PayrollDataScalarFieldEnum)[keyof typeof PayrollDataScalarFieldEnum]


  export const DailyCommissionEntryScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    date: 'date',
    serviceCode: 'serviceCode',
    serviceName: 'serviceName',
    serviceGroup: 'serviceGroup',
    serviceType: 'serviceType',
    quantity: 'quantity',
    timesPerformed: 'timesPerformed',
    timesSold: 'timesSold',
    revenueBeforeDiscount: 'revenueBeforeDiscount',
    revenueAfterDiscount: 'revenueAfterDiscount',
    commissionAmount: 'commissionAmount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DailyCommissionEntryScalarFieldEnum = (typeof DailyCommissionEntryScalarFieldEnum)[keyof typeof DailyCommissionEntryScalarFieldEnum]


  export const SystemSettingsScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SystemSettingsScalarFieldEnum = (typeof SystemSettingsScalarFieldEnum)[keyof typeof SystemSettingsScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    oldData: 'oldData',
    newData: 'newData',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'EmployeeGroup'
   */
  export type EnumEmployeeGroupFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmployeeGroup'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ServiceType'
   */
  export type EnumServiceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServiceType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: StringFilter<"Employee"> | string
    name?: StringFilter<"Employee"> | string
    code?: StringFilter<"Employee"> | string
    position?: StringFilter<"Employee"> | string
    department?: StringFilter<"Employee"> | string
    employeeGroup?: EnumEmployeeGroupFilter<"Employee"> | $Enums.EmployeeGroup
    basicSalary?: IntFilter<"Employee"> | number
    allowance?: IntFilter<"Employee"> | number
    currentLevel?: StringFilter<"Employee"> | string
    isNewEmployee?: BoolFilter<"Employee"> | boolean
    isActive?: BoolFilter<"Employee"> | boolean
    hireDate?: DateTimeFilter<"Employee"> | Date | string
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    payrollData?: PayrollDataListRelationFilter
    commissionEntries?: DailyCommissionEntryListRelationFilter
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    position?: SortOrder
    department?: SortOrder
    employeeGroup?: SortOrder
    basicSalary?: SortOrder
    allowance?: SortOrder
    currentLevel?: SortOrder
    isNewEmployee?: SortOrder
    isActive?: SortOrder
    hireDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    payrollData?: PayrollDataOrderByRelationAggregateInput
    commissionEntries?: DailyCommissionEntryOrderByRelationAggregateInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    name?: StringFilter<"Employee"> | string
    position?: StringFilter<"Employee"> | string
    department?: StringFilter<"Employee"> | string
    employeeGroup?: EnumEmployeeGroupFilter<"Employee"> | $Enums.EmployeeGroup
    basicSalary?: IntFilter<"Employee"> | number
    allowance?: IntFilter<"Employee"> | number
    currentLevel?: StringFilter<"Employee"> | string
    isNewEmployee?: BoolFilter<"Employee"> | boolean
    isActive?: BoolFilter<"Employee"> | boolean
    hireDate?: DateTimeFilter<"Employee"> | Date | string
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    payrollData?: PayrollDataListRelationFilter
    commissionEntries?: DailyCommissionEntryListRelationFilter
  }, "id" | "code">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    position?: SortOrder
    department?: SortOrder
    employeeGroup?: SortOrder
    basicSalary?: SortOrder
    allowance?: SortOrder
    currentLevel?: SortOrder
    isNewEmployee?: SortOrder
    isActive?: SortOrder
    hireDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Employee"> | string
    name?: StringWithAggregatesFilter<"Employee"> | string
    code?: StringWithAggregatesFilter<"Employee"> | string
    position?: StringWithAggregatesFilter<"Employee"> | string
    department?: StringWithAggregatesFilter<"Employee"> | string
    employeeGroup?: EnumEmployeeGroupWithAggregatesFilter<"Employee"> | $Enums.EmployeeGroup
    basicSalary?: IntWithAggregatesFilter<"Employee"> | number
    allowance?: IntWithAggregatesFilter<"Employee"> | number
    currentLevel?: StringWithAggregatesFilter<"Employee"> | string
    isNewEmployee?: BoolWithAggregatesFilter<"Employee"> | boolean
    isActive?: BoolWithAggregatesFilter<"Employee"> | boolean
    hireDate?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
  }

  export type PayrollDataWhereInput = {
    AND?: PayrollDataWhereInput | PayrollDataWhereInput[]
    OR?: PayrollDataWhereInput[]
    NOT?: PayrollDataWhereInput | PayrollDataWhereInput[]
    id?: StringFilter<"PayrollData"> | string
    employeeId?: StringFilter<"PayrollData"> | string
    month?: StringFilter<"PayrollData"> | string
    dailyRevenue?: IntFilter<"PayrollData"> | number
    monthlyRevenue?: IntFilter<"PayrollData"> | number
    serviceRevenue?: IntFilter<"PayrollData"> | number
    productRevenue?: IntFilter<"PayrollData"> | number
    facialRevenue?: IntFilter<"PayrollData"> | number
    washingRevenue?: IntFilter<"PayrollData"> | number
    chemicalRevenue?: IntFilter<"PayrollData"> | number
    bleachingRevenue?: IntFilter<"PayrollData"> | number
    cuttingRevenue?: IntFilter<"PayrollData"> | number
    oilTreatmentRevenue?: IntFilter<"PayrollData"> | number
    keratinRevenue?: IntFilter<"PayrollData"> | number
    spaFootRevenue?: IntFilter<"PayrollData"> | number
    nailDesignRevenue?: IntFilter<"PayrollData"> | number
    eyebrowThreadingRevenue?: IntFilter<"PayrollData"> | number
    kpiAchieved?: BoolFilter<"PayrollData"> | boolean
    kpiDetails?: StringFilter<"PayrollData"> | string
    bonus?: IntFilter<"PayrollData"> | number
    penalty?: IntFilter<"PayrollData"> | number
    advance?: IntFilter<"PayrollData"> | number
    calculatedLevel?: StringFilter<"PayrollData"> | string
    createdAt?: DateTimeFilter<"PayrollData"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollData"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type PayrollDataOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    month?: SortOrder
    dailyRevenue?: SortOrder
    monthlyRevenue?: SortOrder
    serviceRevenue?: SortOrder
    productRevenue?: SortOrder
    facialRevenue?: SortOrder
    washingRevenue?: SortOrder
    chemicalRevenue?: SortOrder
    bleachingRevenue?: SortOrder
    cuttingRevenue?: SortOrder
    oilTreatmentRevenue?: SortOrder
    keratinRevenue?: SortOrder
    spaFootRevenue?: SortOrder
    nailDesignRevenue?: SortOrder
    eyebrowThreadingRevenue?: SortOrder
    kpiAchieved?: SortOrder
    kpiDetails?: SortOrder
    bonus?: SortOrder
    penalty?: SortOrder
    advance?: SortOrder
    calculatedLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type PayrollDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    employeeId_month?: PayrollDataEmployeeIdMonthCompoundUniqueInput
    AND?: PayrollDataWhereInput | PayrollDataWhereInput[]
    OR?: PayrollDataWhereInput[]
    NOT?: PayrollDataWhereInput | PayrollDataWhereInput[]
    employeeId?: StringFilter<"PayrollData"> | string
    month?: StringFilter<"PayrollData"> | string
    dailyRevenue?: IntFilter<"PayrollData"> | number
    monthlyRevenue?: IntFilter<"PayrollData"> | number
    serviceRevenue?: IntFilter<"PayrollData"> | number
    productRevenue?: IntFilter<"PayrollData"> | number
    facialRevenue?: IntFilter<"PayrollData"> | number
    washingRevenue?: IntFilter<"PayrollData"> | number
    chemicalRevenue?: IntFilter<"PayrollData"> | number
    bleachingRevenue?: IntFilter<"PayrollData"> | number
    cuttingRevenue?: IntFilter<"PayrollData"> | number
    oilTreatmentRevenue?: IntFilter<"PayrollData"> | number
    keratinRevenue?: IntFilter<"PayrollData"> | number
    spaFootRevenue?: IntFilter<"PayrollData"> | number
    nailDesignRevenue?: IntFilter<"PayrollData"> | number
    eyebrowThreadingRevenue?: IntFilter<"PayrollData"> | number
    kpiAchieved?: BoolFilter<"PayrollData"> | boolean
    kpiDetails?: StringFilter<"PayrollData"> | string
    bonus?: IntFilter<"PayrollData"> | number
    penalty?: IntFilter<"PayrollData"> | number
    advance?: IntFilter<"PayrollData"> | number
    calculatedLevel?: StringFilter<"PayrollData"> | string
    createdAt?: DateTimeFilter<"PayrollData"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollData"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id" | "employeeId_month">

  export type PayrollDataOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    month?: SortOrder
    dailyRevenue?: SortOrder
    monthlyRevenue?: SortOrder
    serviceRevenue?: SortOrder
    productRevenue?: SortOrder
    facialRevenue?: SortOrder
    washingRevenue?: SortOrder
    chemicalRevenue?: SortOrder
    bleachingRevenue?: SortOrder
    cuttingRevenue?: SortOrder
    oilTreatmentRevenue?: SortOrder
    keratinRevenue?: SortOrder
    spaFootRevenue?: SortOrder
    nailDesignRevenue?: SortOrder
    eyebrowThreadingRevenue?: SortOrder
    kpiAchieved?: SortOrder
    kpiDetails?: SortOrder
    bonus?: SortOrder
    penalty?: SortOrder
    advance?: SortOrder
    calculatedLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PayrollDataCountOrderByAggregateInput
    _avg?: PayrollDataAvgOrderByAggregateInput
    _max?: PayrollDataMaxOrderByAggregateInput
    _min?: PayrollDataMinOrderByAggregateInput
    _sum?: PayrollDataSumOrderByAggregateInput
  }

  export type PayrollDataScalarWhereWithAggregatesInput = {
    AND?: PayrollDataScalarWhereWithAggregatesInput | PayrollDataScalarWhereWithAggregatesInput[]
    OR?: PayrollDataScalarWhereWithAggregatesInput[]
    NOT?: PayrollDataScalarWhereWithAggregatesInput | PayrollDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PayrollData"> | string
    employeeId?: StringWithAggregatesFilter<"PayrollData"> | string
    month?: StringWithAggregatesFilter<"PayrollData"> | string
    dailyRevenue?: IntWithAggregatesFilter<"PayrollData"> | number
    monthlyRevenue?: IntWithAggregatesFilter<"PayrollData"> | number
    serviceRevenue?: IntWithAggregatesFilter<"PayrollData"> | number
    productRevenue?: IntWithAggregatesFilter<"PayrollData"> | number
    facialRevenue?: IntWithAggregatesFilter<"PayrollData"> | number
    washingRevenue?: IntWithAggregatesFilter<"PayrollData"> | number
    chemicalRevenue?: IntWithAggregatesFilter<"PayrollData"> | number
    bleachingRevenue?: IntWithAggregatesFilter<"PayrollData"> | number
    cuttingRevenue?: IntWithAggregatesFilter<"PayrollData"> | number
    oilTreatmentRevenue?: IntWithAggregatesFilter<"PayrollData"> | number
    keratinRevenue?: IntWithAggregatesFilter<"PayrollData"> | number
    spaFootRevenue?: IntWithAggregatesFilter<"PayrollData"> | number
    nailDesignRevenue?: IntWithAggregatesFilter<"PayrollData"> | number
    eyebrowThreadingRevenue?: IntWithAggregatesFilter<"PayrollData"> | number
    kpiAchieved?: BoolWithAggregatesFilter<"PayrollData"> | boolean
    kpiDetails?: StringWithAggregatesFilter<"PayrollData"> | string
    bonus?: IntWithAggregatesFilter<"PayrollData"> | number
    penalty?: IntWithAggregatesFilter<"PayrollData"> | number
    advance?: IntWithAggregatesFilter<"PayrollData"> | number
    calculatedLevel?: StringWithAggregatesFilter<"PayrollData"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PayrollData"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PayrollData"> | Date | string
  }

  export type DailyCommissionEntryWhereInput = {
    AND?: DailyCommissionEntryWhereInput | DailyCommissionEntryWhereInput[]
    OR?: DailyCommissionEntryWhereInput[]
    NOT?: DailyCommissionEntryWhereInput | DailyCommissionEntryWhereInput[]
    id?: StringFilter<"DailyCommissionEntry"> | string
    employeeId?: StringFilter<"DailyCommissionEntry"> | string
    date?: DateTimeFilter<"DailyCommissionEntry"> | Date | string
    serviceCode?: StringFilter<"DailyCommissionEntry"> | string
    serviceName?: StringFilter<"DailyCommissionEntry"> | string
    serviceGroup?: StringFilter<"DailyCommissionEntry"> | string
    serviceType?: EnumServiceTypeFilter<"DailyCommissionEntry"> | $Enums.ServiceType
    quantity?: IntFilter<"DailyCommissionEntry"> | number
    timesPerformed?: IntFilter<"DailyCommissionEntry"> | number
    timesSold?: IntFilter<"DailyCommissionEntry"> | number
    revenueBeforeDiscount?: IntFilter<"DailyCommissionEntry"> | number
    revenueAfterDiscount?: IntFilter<"DailyCommissionEntry"> | number
    commissionAmount?: IntFilter<"DailyCommissionEntry"> | number
    createdAt?: DateTimeFilter<"DailyCommissionEntry"> | Date | string
    updatedAt?: DateTimeFilter<"DailyCommissionEntry"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type DailyCommissionEntryOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    serviceCode?: SortOrder
    serviceName?: SortOrder
    serviceGroup?: SortOrder
    serviceType?: SortOrder
    quantity?: SortOrder
    timesPerformed?: SortOrder
    timesSold?: SortOrder
    revenueBeforeDiscount?: SortOrder
    revenueAfterDiscount?: SortOrder
    commissionAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type DailyCommissionEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DailyCommissionEntryWhereInput | DailyCommissionEntryWhereInput[]
    OR?: DailyCommissionEntryWhereInput[]
    NOT?: DailyCommissionEntryWhereInput | DailyCommissionEntryWhereInput[]
    employeeId?: StringFilter<"DailyCommissionEntry"> | string
    date?: DateTimeFilter<"DailyCommissionEntry"> | Date | string
    serviceCode?: StringFilter<"DailyCommissionEntry"> | string
    serviceName?: StringFilter<"DailyCommissionEntry"> | string
    serviceGroup?: StringFilter<"DailyCommissionEntry"> | string
    serviceType?: EnumServiceTypeFilter<"DailyCommissionEntry"> | $Enums.ServiceType
    quantity?: IntFilter<"DailyCommissionEntry"> | number
    timesPerformed?: IntFilter<"DailyCommissionEntry"> | number
    timesSold?: IntFilter<"DailyCommissionEntry"> | number
    revenueBeforeDiscount?: IntFilter<"DailyCommissionEntry"> | number
    revenueAfterDiscount?: IntFilter<"DailyCommissionEntry"> | number
    commissionAmount?: IntFilter<"DailyCommissionEntry"> | number
    createdAt?: DateTimeFilter<"DailyCommissionEntry"> | Date | string
    updatedAt?: DateTimeFilter<"DailyCommissionEntry"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id">

  export type DailyCommissionEntryOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    serviceCode?: SortOrder
    serviceName?: SortOrder
    serviceGroup?: SortOrder
    serviceType?: SortOrder
    quantity?: SortOrder
    timesPerformed?: SortOrder
    timesSold?: SortOrder
    revenueBeforeDiscount?: SortOrder
    revenueAfterDiscount?: SortOrder
    commissionAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DailyCommissionEntryCountOrderByAggregateInput
    _avg?: DailyCommissionEntryAvgOrderByAggregateInput
    _max?: DailyCommissionEntryMaxOrderByAggregateInput
    _min?: DailyCommissionEntryMinOrderByAggregateInput
    _sum?: DailyCommissionEntrySumOrderByAggregateInput
  }

  export type DailyCommissionEntryScalarWhereWithAggregatesInput = {
    AND?: DailyCommissionEntryScalarWhereWithAggregatesInput | DailyCommissionEntryScalarWhereWithAggregatesInput[]
    OR?: DailyCommissionEntryScalarWhereWithAggregatesInput[]
    NOT?: DailyCommissionEntryScalarWhereWithAggregatesInput | DailyCommissionEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DailyCommissionEntry"> | string
    employeeId?: StringWithAggregatesFilter<"DailyCommissionEntry"> | string
    date?: DateTimeWithAggregatesFilter<"DailyCommissionEntry"> | Date | string
    serviceCode?: StringWithAggregatesFilter<"DailyCommissionEntry"> | string
    serviceName?: StringWithAggregatesFilter<"DailyCommissionEntry"> | string
    serviceGroup?: StringWithAggregatesFilter<"DailyCommissionEntry"> | string
    serviceType?: EnumServiceTypeWithAggregatesFilter<"DailyCommissionEntry"> | $Enums.ServiceType
    quantity?: IntWithAggregatesFilter<"DailyCommissionEntry"> | number
    timesPerformed?: IntWithAggregatesFilter<"DailyCommissionEntry"> | number
    timesSold?: IntWithAggregatesFilter<"DailyCommissionEntry"> | number
    revenueBeforeDiscount?: IntWithAggregatesFilter<"DailyCommissionEntry"> | number
    revenueAfterDiscount?: IntWithAggregatesFilter<"DailyCommissionEntry"> | number
    commissionAmount?: IntWithAggregatesFilter<"DailyCommissionEntry"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DailyCommissionEntry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DailyCommissionEntry"> | Date | string
  }

  export type SystemSettingsWhereInput = {
    AND?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    OR?: SystemSettingsWhereInput[]
    NOT?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    id?: StringFilter<"SystemSettings"> | string
    key?: StringFilter<"SystemSettings"> | string
    value?: StringFilter<"SystemSettings"> | string
    createdAt?: DateTimeFilter<"SystemSettings"> | Date | string
    updatedAt?: DateTimeFilter<"SystemSettings"> | Date | string
  }

  export type SystemSettingsOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    OR?: SystemSettingsWhereInput[]
    NOT?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    value?: StringFilter<"SystemSettings"> | string
    createdAt?: DateTimeFilter<"SystemSettings"> | Date | string
    updatedAt?: DateTimeFilter<"SystemSettings"> | Date | string
  }, "id" | "key">

  export type SystemSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemSettingsCountOrderByAggregateInput
    _max?: SystemSettingsMaxOrderByAggregateInput
    _min?: SystemSettingsMinOrderByAggregateInput
  }

  export type SystemSettingsScalarWhereWithAggregatesInput = {
    AND?: SystemSettingsScalarWhereWithAggregatesInput | SystemSettingsScalarWhereWithAggregatesInput[]
    OR?: SystemSettingsScalarWhereWithAggregatesInput[]
    NOT?: SystemSettingsScalarWhereWithAggregatesInput | SystemSettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemSettings"> | string
    key?: StringWithAggregatesFilter<"SystemSettings"> | string
    value?: StringWithAggregatesFilter<"SystemSettings"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SystemSettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemSettings"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    oldData?: StringNullableFilter<"AuditLog"> | string | null
    newData?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    oldData?: StringNullableFilter<"AuditLog"> | string | null
    newData?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entity?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    oldData?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    newData?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateInput = {
    id?: string
    name: string
    code: string
    position: string
    department: string
    employeeGroup: $Enums.EmployeeGroup
    basicSalary?: number
    allowance?: number
    currentLevel: string
    isNewEmployee?: boolean
    isActive?: boolean
    hireDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    payrollData?: PayrollDataCreateNestedManyWithoutEmployeeInput
    commissionEntries?: DailyCommissionEntryCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    position: string
    department: string
    employeeGroup: $Enums.EmployeeGroup
    basicSalary?: number
    allowance?: number
    currentLevel: string
    isNewEmployee?: boolean
    isActive?: boolean
    hireDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    payrollData?: PayrollDataUncheckedCreateNestedManyWithoutEmployeeInput
    commissionEntries?: DailyCommissionEntryUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employeeGroup?: EnumEmployeeGroupFieldUpdateOperationsInput | $Enums.EmployeeGroup
    basicSalary?: IntFieldUpdateOperationsInput | number
    allowance?: IntFieldUpdateOperationsInput | number
    currentLevel?: StringFieldUpdateOperationsInput | string
    isNewEmployee?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payrollData?: PayrollDataUpdateManyWithoutEmployeeNestedInput
    commissionEntries?: DailyCommissionEntryUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employeeGroup?: EnumEmployeeGroupFieldUpdateOperationsInput | $Enums.EmployeeGroup
    basicSalary?: IntFieldUpdateOperationsInput | number
    allowance?: IntFieldUpdateOperationsInput | number
    currentLevel?: StringFieldUpdateOperationsInput | string
    isNewEmployee?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payrollData?: PayrollDataUncheckedUpdateManyWithoutEmployeeNestedInput
    commissionEntries?: DailyCommissionEntryUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateManyInput = {
    id?: string
    name: string
    code: string
    position: string
    department: string
    employeeGroup: $Enums.EmployeeGroup
    basicSalary?: number
    allowance?: number
    currentLevel: string
    isNewEmployee?: boolean
    isActive?: boolean
    hireDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employeeGroup?: EnumEmployeeGroupFieldUpdateOperationsInput | $Enums.EmployeeGroup
    basicSalary?: IntFieldUpdateOperationsInput | number
    allowance?: IntFieldUpdateOperationsInput | number
    currentLevel?: StringFieldUpdateOperationsInput | string
    isNewEmployee?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employeeGroup?: EnumEmployeeGroupFieldUpdateOperationsInput | $Enums.EmployeeGroup
    basicSalary?: IntFieldUpdateOperationsInput | number
    allowance?: IntFieldUpdateOperationsInput | number
    currentLevel?: StringFieldUpdateOperationsInput | string
    isNewEmployee?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollDataCreateInput = {
    id?: string
    month: string
    dailyRevenue?: number
    monthlyRevenue?: number
    serviceRevenue?: number
    productRevenue?: number
    facialRevenue?: number
    washingRevenue?: number
    chemicalRevenue?: number
    bleachingRevenue?: number
    cuttingRevenue?: number
    oilTreatmentRevenue?: number
    keratinRevenue?: number
    spaFootRevenue?: number
    nailDesignRevenue?: number
    eyebrowThreadingRevenue?: number
    kpiAchieved?: boolean
    kpiDetails?: string
    bonus?: number
    penalty?: number
    advance?: number
    calculatedLevel: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutPayrollDataInput
  }

  export type PayrollDataUncheckedCreateInput = {
    id?: string
    employeeId: string
    month: string
    dailyRevenue?: number
    monthlyRevenue?: number
    serviceRevenue?: number
    productRevenue?: number
    facialRevenue?: number
    washingRevenue?: number
    chemicalRevenue?: number
    bleachingRevenue?: number
    cuttingRevenue?: number
    oilTreatmentRevenue?: number
    keratinRevenue?: number
    spaFootRevenue?: number
    nailDesignRevenue?: number
    eyebrowThreadingRevenue?: number
    kpiAchieved?: boolean
    kpiDetails?: string
    bonus?: number
    penalty?: number
    advance?: number
    calculatedLevel: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayrollDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    dailyRevenue?: IntFieldUpdateOperationsInput | number
    monthlyRevenue?: IntFieldUpdateOperationsInput | number
    serviceRevenue?: IntFieldUpdateOperationsInput | number
    productRevenue?: IntFieldUpdateOperationsInput | number
    facialRevenue?: IntFieldUpdateOperationsInput | number
    washingRevenue?: IntFieldUpdateOperationsInput | number
    chemicalRevenue?: IntFieldUpdateOperationsInput | number
    bleachingRevenue?: IntFieldUpdateOperationsInput | number
    cuttingRevenue?: IntFieldUpdateOperationsInput | number
    oilTreatmentRevenue?: IntFieldUpdateOperationsInput | number
    keratinRevenue?: IntFieldUpdateOperationsInput | number
    spaFootRevenue?: IntFieldUpdateOperationsInput | number
    nailDesignRevenue?: IntFieldUpdateOperationsInput | number
    eyebrowThreadingRevenue?: IntFieldUpdateOperationsInput | number
    kpiAchieved?: BoolFieldUpdateOperationsInput | boolean
    kpiDetails?: StringFieldUpdateOperationsInput | string
    bonus?: IntFieldUpdateOperationsInput | number
    penalty?: IntFieldUpdateOperationsInput | number
    advance?: IntFieldUpdateOperationsInput | number
    calculatedLevel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPayrollDataNestedInput
  }

  export type PayrollDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    dailyRevenue?: IntFieldUpdateOperationsInput | number
    monthlyRevenue?: IntFieldUpdateOperationsInput | number
    serviceRevenue?: IntFieldUpdateOperationsInput | number
    productRevenue?: IntFieldUpdateOperationsInput | number
    facialRevenue?: IntFieldUpdateOperationsInput | number
    washingRevenue?: IntFieldUpdateOperationsInput | number
    chemicalRevenue?: IntFieldUpdateOperationsInput | number
    bleachingRevenue?: IntFieldUpdateOperationsInput | number
    cuttingRevenue?: IntFieldUpdateOperationsInput | number
    oilTreatmentRevenue?: IntFieldUpdateOperationsInput | number
    keratinRevenue?: IntFieldUpdateOperationsInput | number
    spaFootRevenue?: IntFieldUpdateOperationsInput | number
    nailDesignRevenue?: IntFieldUpdateOperationsInput | number
    eyebrowThreadingRevenue?: IntFieldUpdateOperationsInput | number
    kpiAchieved?: BoolFieldUpdateOperationsInput | boolean
    kpiDetails?: StringFieldUpdateOperationsInput | string
    bonus?: IntFieldUpdateOperationsInput | number
    penalty?: IntFieldUpdateOperationsInput | number
    advance?: IntFieldUpdateOperationsInput | number
    calculatedLevel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollDataCreateManyInput = {
    id?: string
    employeeId: string
    month: string
    dailyRevenue?: number
    monthlyRevenue?: number
    serviceRevenue?: number
    productRevenue?: number
    facialRevenue?: number
    washingRevenue?: number
    chemicalRevenue?: number
    bleachingRevenue?: number
    cuttingRevenue?: number
    oilTreatmentRevenue?: number
    keratinRevenue?: number
    spaFootRevenue?: number
    nailDesignRevenue?: number
    eyebrowThreadingRevenue?: number
    kpiAchieved?: boolean
    kpiDetails?: string
    bonus?: number
    penalty?: number
    advance?: number
    calculatedLevel: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayrollDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    dailyRevenue?: IntFieldUpdateOperationsInput | number
    monthlyRevenue?: IntFieldUpdateOperationsInput | number
    serviceRevenue?: IntFieldUpdateOperationsInput | number
    productRevenue?: IntFieldUpdateOperationsInput | number
    facialRevenue?: IntFieldUpdateOperationsInput | number
    washingRevenue?: IntFieldUpdateOperationsInput | number
    chemicalRevenue?: IntFieldUpdateOperationsInput | number
    bleachingRevenue?: IntFieldUpdateOperationsInput | number
    cuttingRevenue?: IntFieldUpdateOperationsInput | number
    oilTreatmentRevenue?: IntFieldUpdateOperationsInput | number
    keratinRevenue?: IntFieldUpdateOperationsInput | number
    spaFootRevenue?: IntFieldUpdateOperationsInput | number
    nailDesignRevenue?: IntFieldUpdateOperationsInput | number
    eyebrowThreadingRevenue?: IntFieldUpdateOperationsInput | number
    kpiAchieved?: BoolFieldUpdateOperationsInput | boolean
    kpiDetails?: StringFieldUpdateOperationsInput | string
    bonus?: IntFieldUpdateOperationsInput | number
    penalty?: IntFieldUpdateOperationsInput | number
    advance?: IntFieldUpdateOperationsInput | number
    calculatedLevel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    dailyRevenue?: IntFieldUpdateOperationsInput | number
    monthlyRevenue?: IntFieldUpdateOperationsInput | number
    serviceRevenue?: IntFieldUpdateOperationsInput | number
    productRevenue?: IntFieldUpdateOperationsInput | number
    facialRevenue?: IntFieldUpdateOperationsInput | number
    washingRevenue?: IntFieldUpdateOperationsInput | number
    chemicalRevenue?: IntFieldUpdateOperationsInput | number
    bleachingRevenue?: IntFieldUpdateOperationsInput | number
    cuttingRevenue?: IntFieldUpdateOperationsInput | number
    oilTreatmentRevenue?: IntFieldUpdateOperationsInput | number
    keratinRevenue?: IntFieldUpdateOperationsInput | number
    spaFootRevenue?: IntFieldUpdateOperationsInput | number
    nailDesignRevenue?: IntFieldUpdateOperationsInput | number
    eyebrowThreadingRevenue?: IntFieldUpdateOperationsInput | number
    kpiAchieved?: BoolFieldUpdateOperationsInput | boolean
    kpiDetails?: StringFieldUpdateOperationsInput | string
    bonus?: IntFieldUpdateOperationsInput | number
    penalty?: IntFieldUpdateOperationsInput | number
    advance?: IntFieldUpdateOperationsInput | number
    calculatedLevel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyCommissionEntryCreateInput = {
    id?: string
    date: Date | string
    serviceCode: string
    serviceName: string
    serviceGroup: string
    serviceType: $Enums.ServiceType
    quantity?: number
    timesPerformed?: number
    timesSold?: number
    revenueBeforeDiscount?: number
    revenueAfterDiscount?: number
    commissionAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutCommissionEntriesInput
  }

  export type DailyCommissionEntryUncheckedCreateInput = {
    id?: string
    employeeId: string
    date: Date | string
    serviceCode: string
    serviceName: string
    serviceGroup: string
    serviceType: $Enums.ServiceType
    quantity?: number
    timesPerformed?: number
    timesSold?: number
    revenueBeforeDiscount?: number
    revenueAfterDiscount?: number
    commissionAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyCommissionEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceGroup?: StringFieldUpdateOperationsInput | string
    serviceType?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    quantity?: IntFieldUpdateOperationsInput | number
    timesPerformed?: IntFieldUpdateOperationsInput | number
    timesSold?: IntFieldUpdateOperationsInput | number
    revenueBeforeDiscount?: IntFieldUpdateOperationsInput | number
    revenueAfterDiscount?: IntFieldUpdateOperationsInput | number
    commissionAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutCommissionEntriesNestedInput
  }

  export type DailyCommissionEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceGroup?: StringFieldUpdateOperationsInput | string
    serviceType?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    quantity?: IntFieldUpdateOperationsInput | number
    timesPerformed?: IntFieldUpdateOperationsInput | number
    timesSold?: IntFieldUpdateOperationsInput | number
    revenueBeforeDiscount?: IntFieldUpdateOperationsInput | number
    revenueAfterDiscount?: IntFieldUpdateOperationsInput | number
    commissionAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyCommissionEntryCreateManyInput = {
    id?: string
    employeeId: string
    date: Date | string
    serviceCode: string
    serviceName: string
    serviceGroup: string
    serviceType: $Enums.ServiceType
    quantity?: number
    timesPerformed?: number
    timesSold?: number
    revenueBeforeDiscount?: number
    revenueAfterDiscount?: number
    commissionAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyCommissionEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceGroup?: StringFieldUpdateOperationsInput | string
    serviceType?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    quantity?: IntFieldUpdateOperationsInput | number
    timesPerformed?: IntFieldUpdateOperationsInput | number
    timesSold?: IntFieldUpdateOperationsInput | number
    revenueBeforeDiscount?: IntFieldUpdateOperationsInput | number
    revenueAfterDiscount?: IntFieldUpdateOperationsInput | number
    commissionAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyCommissionEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceGroup?: StringFieldUpdateOperationsInput | string
    serviceType?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    quantity?: IntFieldUpdateOperationsInput | number
    timesPerformed?: IntFieldUpdateOperationsInput | number
    timesSold?: IntFieldUpdateOperationsInput | number
    revenueBeforeDiscount?: IntFieldUpdateOperationsInput | number
    revenueAfterDiscount?: IntFieldUpdateOperationsInput | number
    commissionAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsCreateInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingsUncheckedCreateInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsCreateManyInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    userId?: string | null
    action: string
    entity: string
    entityId?: string | null
    oldData?: string | null
    newData?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId?: string | null
    action: string
    entity: string
    entityId?: string | null
    oldData?: string | null
    newData?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId?: string | null
    action: string
    entity: string
    entityId?: string | null
    oldData?: string | null
    newData?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumEmployeeGroupFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeGroup | EnumEmployeeGroupFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeGroup[]
    notIn?: $Enums.EmployeeGroup[]
    not?: NestedEnumEmployeeGroupFilter<$PrismaModel> | $Enums.EmployeeGroup
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PayrollDataListRelationFilter = {
    every?: PayrollDataWhereInput
    some?: PayrollDataWhereInput
    none?: PayrollDataWhereInput
  }

  export type DailyCommissionEntryListRelationFilter = {
    every?: DailyCommissionEntryWhereInput
    some?: DailyCommissionEntryWhereInput
    none?: DailyCommissionEntryWhereInput
  }

  export type PayrollDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DailyCommissionEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    position?: SortOrder
    department?: SortOrder
    employeeGroup?: SortOrder
    basicSalary?: SortOrder
    allowance?: SortOrder
    currentLevel?: SortOrder
    isNewEmployee?: SortOrder
    isActive?: SortOrder
    hireDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    basicSalary?: SortOrder
    allowance?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    position?: SortOrder
    department?: SortOrder
    employeeGroup?: SortOrder
    basicSalary?: SortOrder
    allowance?: SortOrder
    currentLevel?: SortOrder
    isNewEmployee?: SortOrder
    isActive?: SortOrder
    hireDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    position?: SortOrder
    department?: SortOrder
    employeeGroup?: SortOrder
    basicSalary?: SortOrder
    allowance?: SortOrder
    currentLevel?: SortOrder
    isNewEmployee?: SortOrder
    isActive?: SortOrder
    hireDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    basicSalary?: SortOrder
    allowance?: SortOrder
  }

  export type EnumEmployeeGroupWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeGroup | EnumEmployeeGroupFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeGroup[]
    notIn?: $Enums.EmployeeGroup[]
    not?: NestedEnumEmployeeGroupWithAggregatesFilter<$PrismaModel> | $Enums.EmployeeGroup
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmployeeGroupFilter<$PrismaModel>
    _max?: NestedEnumEmployeeGroupFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EmployeeScalarRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type PayrollDataEmployeeIdMonthCompoundUniqueInput = {
    employeeId: string
    month: string
  }

  export type PayrollDataCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    month?: SortOrder
    dailyRevenue?: SortOrder
    monthlyRevenue?: SortOrder
    serviceRevenue?: SortOrder
    productRevenue?: SortOrder
    facialRevenue?: SortOrder
    washingRevenue?: SortOrder
    chemicalRevenue?: SortOrder
    bleachingRevenue?: SortOrder
    cuttingRevenue?: SortOrder
    oilTreatmentRevenue?: SortOrder
    keratinRevenue?: SortOrder
    spaFootRevenue?: SortOrder
    nailDesignRevenue?: SortOrder
    eyebrowThreadingRevenue?: SortOrder
    kpiAchieved?: SortOrder
    kpiDetails?: SortOrder
    bonus?: SortOrder
    penalty?: SortOrder
    advance?: SortOrder
    calculatedLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PayrollDataAvgOrderByAggregateInput = {
    dailyRevenue?: SortOrder
    monthlyRevenue?: SortOrder
    serviceRevenue?: SortOrder
    productRevenue?: SortOrder
    facialRevenue?: SortOrder
    washingRevenue?: SortOrder
    chemicalRevenue?: SortOrder
    bleachingRevenue?: SortOrder
    cuttingRevenue?: SortOrder
    oilTreatmentRevenue?: SortOrder
    keratinRevenue?: SortOrder
    spaFootRevenue?: SortOrder
    nailDesignRevenue?: SortOrder
    eyebrowThreadingRevenue?: SortOrder
    bonus?: SortOrder
    penalty?: SortOrder
    advance?: SortOrder
  }

  export type PayrollDataMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    month?: SortOrder
    dailyRevenue?: SortOrder
    monthlyRevenue?: SortOrder
    serviceRevenue?: SortOrder
    productRevenue?: SortOrder
    facialRevenue?: SortOrder
    washingRevenue?: SortOrder
    chemicalRevenue?: SortOrder
    bleachingRevenue?: SortOrder
    cuttingRevenue?: SortOrder
    oilTreatmentRevenue?: SortOrder
    keratinRevenue?: SortOrder
    spaFootRevenue?: SortOrder
    nailDesignRevenue?: SortOrder
    eyebrowThreadingRevenue?: SortOrder
    kpiAchieved?: SortOrder
    kpiDetails?: SortOrder
    bonus?: SortOrder
    penalty?: SortOrder
    advance?: SortOrder
    calculatedLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PayrollDataMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    month?: SortOrder
    dailyRevenue?: SortOrder
    monthlyRevenue?: SortOrder
    serviceRevenue?: SortOrder
    productRevenue?: SortOrder
    facialRevenue?: SortOrder
    washingRevenue?: SortOrder
    chemicalRevenue?: SortOrder
    bleachingRevenue?: SortOrder
    cuttingRevenue?: SortOrder
    oilTreatmentRevenue?: SortOrder
    keratinRevenue?: SortOrder
    spaFootRevenue?: SortOrder
    nailDesignRevenue?: SortOrder
    eyebrowThreadingRevenue?: SortOrder
    kpiAchieved?: SortOrder
    kpiDetails?: SortOrder
    bonus?: SortOrder
    penalty?: SortOrder
    advance?: SortOrder
    calculatedLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PayrollDataSumOrderByAggregateInput = {
    dailyRevenue?: SortOrder
    monthlyRevenue?: SortOrder
    serviceRevenue?: SortOrder
    productRevenue?: SortOrder
    facialRevenue?: SortOrder
    washingRevenue?: SortOrder
    chemicalRevenue?: SortOrder
    bleachingRevenue?: SortOrder
    cuttingRevenue?: SortOrder
    oilTreatmentRevenue?: SortOrder
    keratinRevenue?: SortOrder
    spaFootRevenue?: SortOrder
    nailDesignRevenue?: SortOrder
    eyebrowThreadingRevenue?: SortOrder
    bonus?: SortOrder
    penalty?: SortOrder
    advance?: SortOrder
  }

  export type EnumServiceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceType[]
    notIn?: $Enums.ServiceType[]
    not?: NestedEnumServiceTypeFilter<$PrismaModel> | $Enums.ServiceType
  }

  export type DailyCommissionEntryCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    serviceCode?: SortOrder
    serviceName?: SortOrder
    serviceGroup?: SortOrder
    serviceType?: SortOrder
    quantity?: SortOrder
    timesPerformed?: SortOrder
    timesSold?: SortOrder
    revenueBeforeDiscount?: SortOrder
    revenueAfterDiscount?: SortOrder
    commissionAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DailyCommissionEntryAvgOrderByAggregateInput = {
    quantity?: SortOrder
    timesPerformed?: SortOrder
    timesSold?: SortOrder
    revenueBeforeDiscount?: SortOrder
    revenueAfterDiscount?: SortOrder
    commissionAmount?: SortOrder
  }

  export type DailyCommissionEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    serviceCode?: SortOrder
    serviceName?: SortOrder
    serviceGroup?: SortOrder
    serviceType?: SortOrder
    quantity?: SortOrder
    timesPerformed?: SortOrder
    timesSold?: SortOrder
    revenueBeforeDiscount?: SortOrder
    revenueAfterDiscount?: SortOrder
    commissionAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DailyCommissionEntryMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    serviceCode?: SortOrder
    serviceName?: SortOrder
    serviceGroup?: SortOrder
    serviceType?: SortOrder
    quantity?: SortOrder
    timesPerformed?: SortOrder
    timesSold?: SortOrder
    revenueBeforeDiscount?: SortOrder
    revenueAfterDiscount?: SortOrder
    commissionAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DailyCommissionEntrySumOrderByAggregateInput = {
    quantity?: SortOrder
    timesPerformed?: SortOrder
    timesSold?: SortOrder
    revenueBeforeDiscount?: SortOrder
    revenueAfterDiscount?: SortOrder
    commissionAmount?: SortOrder
  }

  export type EnumServiceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceType[]
    notIn?: $Enums.ServiceType[]
    not?: NestedEnumServiceTypeWithAggregatesFilter<$PrismaModel> | $Enums.ServiceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServiceTypeFilter<$PrismaModel>
    _max?: NestedEnumServiceTypeFilter<$PrismaModel>
  }

  export type SystemSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    createdAt?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PayrollDataCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PayrollDataCreateWithoutEmployeeInput, PayrollDataUncheckedCreateWithoutEmployeeInput> | PayrollDataCreateWithoutEmployeeInput[] | PayrollDataUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollDataCreateOrConnectWithoutEmployeeInput | PayrollDataCreateOrConnectWithoutEmployeeInput[]
    createMany?: PayrollDataCreateManyEmployeeInputEnvelope
    connect?: PayrollDataWhereUniqueInput | PayrollDataWhereUniqueInput[]
  }

  export type DailyCommissionEntryCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<DailyCommissionEntryCreateWithoutEmployeeInput, DailyCommissionEntryUncheckedCreateWithoutEmployeeInput> | DailyCommissionEntryCreateWithoutEmployeeInput[] | DailyCommissionEntryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DailyCommissionEntryCreateOrConnectWithoutEmployeeInput | DailyCommissionEntryCreateOrConnectWithoutEmployeeInput[]
    createMany?: DailyCommissionEntryCreateManyEmployeeInputEnvelope
    connect?: DailyCommissionEntryWhereUniqueInput | DailyCommissionEntryWhereUniqueInput[]
  }

  export type PayrollDataUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PayrollDataCreateWithoutEmployeeInput, PayrollDataUncheckedCreateWithoutEmployeeInput> | PayrollDataCreateWithoutEmployeeInput[] | PayrollDataUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollDataCreateOrConnectWithoutEmployeeInput | PayrollDataCreateOrConnectWithoutEmployeeInput[]
    createMany?: PayrollDataCreateManyEmployeeInputEnvelope
    connect?: PayrollDataWhereUniqueInput | PayrollDataWhereUniqueInput[]
  }

  export type DailyCommissionEntryUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<DailyCommissionEntryCreateWithoutEmployeeInput, DailyCommissionEntryUncheckedCreateWithoutEmployeeInput> | DailyCommissionEntryCreateWithoutEmployeeInput[] | DailyCommissionEntryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DailyCommissionEntryCreateOrConnectWithoutEmployeeInput | DailyCommissionEntryCreateOrConnectWithoutEmployeeInput[]
    createMany?: DailyCommissionEntryCreateManyEmployeeInputEnvelope
    connect?: DailyCommissionEntryWhereUniqueInput | DailyCommissionEntryWhereUniqueInput[]
  }

  export type EnumEmployeeGroupFieldUpdateOperationsInput = {
    set?: $Enums.EmployeeGroup
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PayrollDataUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PayrollDataCreateWithoutEmployeeInput, PayrollDataUncheckedCreateWithoutEmployeeInput> | PayrollDataCreateWithoutEmployeeInput[] | PayrollDataUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollDataCreateOrConnectWithoutEmployeeInput | PayrollDataCreateOrConnectWithoutEmployeeInput[]
    upsert?: PayrollDataUpsertWithWhereUniqueWithoutEmployeeInput | PayrollDataUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PayrollDataCreateManyEmployeeInputEnvelope
    set?: PayrollDataWhereUniqueInput | PayrollDataWhereUniqueInput[]
    disconnect?: PayrollDataWhereUniqueInput | PayrollDataWhereUniqueInput[]
    delete?: PayrollDataWhereUniqueInput | PayrollDataWhereUniqueInput[]
    connect?: PayrollDataWhereUniqueInput | PayrollDataWhereUniqueInput[]
    update?: PayrollDataUpdateWithWhereUniqueWithoutEmployeeInput | PayrollDataUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PayrollDataUpdateManyWithWhereWithoutEmployeeInput | PayrollDataUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PayrollDataScalarWhereInput | PayrollDataScalarWhereInput[]
  }

  export type DailyCommissionEntryUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<DailyCommissionEntryCreateWithoutEmployeeInput, DailyCommissionEntryUncheckedCreateWithoutEmployeeInput> | DailyCommissionEntryCreateWithoutEmployeeInput[] | DailyCommissionEntryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DailyCommissionEntryCreateOrConnectWithoutEmployeeInput | DailyCommissionEntryCreateOrConnectWithoutEmployeeInput[]
    upsert?: DailyCommissionEntryUpsertWithWhereUniqueWithoutEmployeeInput | DailyCommissionEntryUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: DailyCommissionEntryCreateManyEmployeeInputEnvelope
    set?: DailyCommissionEntryWhereUniqueInput | DailyCommissionEntryWhereUniqueInput[]
    disconnect?: DailyCommissionEntryWhereUniqueInput | DailyCommissionEntryWhereUniqueInput[]
    delete?: DailyCommissionEntryWhereUniqueInput | DailyCommissionEntryWhereUniqueInput[]
    connect?: DailyCommissionEntryWhereUniqueInput | DailyCommissionEntryWhereUniqueInput[]
    update?: DailyCommissionEntryUpdateWithWhereUniqueWithoutEmployeeInput | DailyCommissionEntryUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: DailyCommissionEntryUpdateManyWithWhereWithoutEmployeeInput | DailyCommissionEntryUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: DailyCommissionEntryScalarWhereInput | DailyCommissionEntryScalarWhereInput[]
  }

  export type PayrollDataUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PayrollDataCreateWithoutEmployeeInput, PayrollDataUncheckedCreateWithoutEmployeeInput> | PayrollDataCreateWithoutEmployeeInput[] | PayrollDataUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollDataCreateOrConnectWithoutEmployeeInput | PayrollDataCreateOrConnectWithoutEmployeeInput[]
    upsert?: PayrollDataUpsertWithWhereUniqueWithoutEmployeeInput | PayrollDataUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PayrollDataCreateManyEmployeeInputEnvelope
    set?: PayrollDataWhereUniqueInput | PayrollDataWhereUniqueInput[]
    disconnect?: PayrollDataWhereUniqueInput | PayrollDataWhereUniqueInput[]
    delete?: PayrollDataWhereUniqueInput | PayrollDataWhereUniqueInput[]
    connect?: PayrollDataWhereUniqueInput | PayrollDataWhereUniqueInput[]
    update?: PayrollDataUpdateWithWhereUniqueWithoutEmployeeInput | PayrollDataUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PayrollDataUpdateManyWithWhereWithoutEmployeeInput | PayrollDataUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PayrollDataScalarWhereInput | PayrollDataScalarWhereInput[]
  }

  export type DailyCommissionEntryUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<DailyCommissionEntryCreateWithoutEmployeeInput, DailyCommissionEntryUncheckedCreateWithoutEmployeeInput> | DailyCommissionEntryCreateWithoutEmployeeInput[] | DailyCommissionEntryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DailyCommissionEntryCreateOrConnectWithoutEmployeeInput | DailyCommissionEntryCreateOrConnectWithoutEmployeeInput[]
    upsert?: DailyCommissionEntryUpsertWithWhereUniqueWithoutEmployeeInput | DailyCommissionEntryUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: DailyCommissionEntryCreateManyEmployeeInputEnvelope
    set?: DailyCommissionEntryWhereUniqueInput | DailyCommissionEntryWhereUniqueInput[]
    disconnect?: DailyCommissionEntryWhereUniqueInput | DailyCommissionEntryWhereUniqueInput[]
    delete?: DailyCommissionEntryWhereUniqueInput | DailyCommissionEntryWhereUniqueInput[]
    connect?: DailyCommissionEntryWhereUniqueInput | DailyCommissionEntryWhereUniqueInput[]
    update?: DailyCommissionEntryUpdateWithWhereUniqueWithoutEmployeeInput | DailyCommissionEntryUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: DailyCommissionEntryUpdateManyWithWhereWithoutEmployeeInput | DailyCommissionEntryUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: DailyCommissionEntryScalarWhereInput | DailyCommissionEntryScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutPayrollDataInput = {
    create?: XOR<EmployeeCreateWithoutPayrollDataInput, EmployeeUncheckedCreateWithoutPayrollDataInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPayrollDataInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutPayrollDataNestedInput = {
    create?: XOR<EmployeeCreateWithoutPayrollDataInput, EmployeeUncheckedCreateWithoutPayrollDataInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPayrollDataInput
    upsert?: EmployeeUpsertWithoutPayrollDataInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutPayrollDataInput, EmployeeUpdateWithoutPayrollDataInput>, EmployeeUncheckedUpdateWithoutPayrollDataInput>
  }

  export type EmployeeCreateNestedOneWithoutCommissionEntriesInput = {
    create?: XOR<EmployeeCreateWithoutCommissionEntriesInput, EmployeeUncheckedCreateWithoutCommissionEntriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCommissionEntriesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EnumServiceTypeFieldUpdateOperationsInput = {
    set?: $Enums.ServiceType
  }

  export type EmployeeUpdateOneRequiredWithoutCommissionEntriesNestedInput = {
    create?: XOR<EmployeeCreateWithoutCommissionEntriesInput, EmployeeUncheckedCreateWithoutCommissionEntriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCommissionEntriesInput
    upsert?: EmployeeUpsertWithoutCommissionEntriesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCommissionEntriesInput, EmployeeUpdateWithoutCommissionEntriesInput>, EmployeeUncheckedUpdateWithoutCommissionEntriesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumEmployeeGroupFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeGroup | EnumEmployeeGroupFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeGroup[]
    notIn?: $Enums.EmployeeGroup[]
    not?: NestedEnumEmployeeGroupFilter<$PrismaModel> | $Enums.EmployeeGroup
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumEmployeeGroupWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeGroup | EnumEmployeeGroupFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeGroup[]
    notIn?: $Enums.EmployeeGroup[]
    not?: NestedEnumEmployeeGroupWithAggregatesFilter<$PrismaModel> | $Enums.EmployeeGroup
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmployeeGroupFilter<$PrismaModel>
    _max?: NestedEnumEmployeeGroupFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumServiceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceType[]
    notIn?: $Enums.ServiceType[]
    not?: NestedEnumServiceTypeFilter<$PrismaModel> | $Enums.ServiceType
  }

  export type NestedEnumServiceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceType[]
    notIn?: $Enums.ServiceType[]
    not?: NestedEnumServiceTypeWithAggregatesFilter<$PrismaModel> | $Enums.ServiceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServiceTypeFilter<$PrismaModel>
    _max?: NestedEnumServiceTypeFilter<$PrismaModel>
  }

  export type PayrollDataCreateWithoutEmployeeInput = {
    id?: string
    month: string
    dailyRevenue?: number
    monthlyRevenue?: number
    serviceRevenue?: number
    productRevenue?: number
    facialRevenue?: number
    washingRevenue?: number
    chemicalRevenue?: number
    bleachingRevenue?: number
    cuttingRevenue?: number
    oilTreatmentRevenue?: number
    keratinRevenue?: number
    spaFootRevenue?: number
    nailDesignRevenue?: number
    eyebrowThreadingRevenue?: number
    kpiAchieved?: boolean
    kpiDetails?: string
    bonus?: number
    penalty?: number
    advance?: number
    calculatedLevel: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayrollDataUncheckedCreateWithoutEmployeeInput = {
    id?: string
    month: string
    dailyRevenue?: number
    monthlyRevenue?: number
    serviceRevenue?: number
    productRevenue?: number
    facialRevenue?: number
    washingRevenue?: number
    chemicalRevenue?: number
    bleachingRevenue?: number
    cuttingRevenue?: number
    oilTreatmentRevenue?: number
    keratinRevenue?: number
    spaFootRevenue?: number
    nailDesignRevenue?: number
    eyebrowThreadingRevenue?: number
    kpiAchieved?: boolean
    kpiDetails?: string
    bonus?: number
    penalty?: number
    advance?: number
    calculatedLevel: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayrollDataCreateOrConnectWithoutEmployeeInput = {
    where: PayrollDataWhereUniqueInput
    create: XOR<PayrollDataCreateWithoutEmployeeInput, PayrollDataUncheckedCreateWithoutEmployeeInput>
  }

  export type PayrollDataCreateManyEmployeeInputEnvelope = {
    data: PayrollDataCreateManyEmployeeInput | PayrollDataCreateManyEmployeeInput[]
  }

  export type DailyCommissionEntryCreateWithoutEmployeeInput = {
    id?: string
    date: Date | string
    serviceCode: string
    serviceName: string
    serviceGroup: string
    serviceType: $Enums.ServiceType
    quantity?: number
    timesPerformed?: number
    timesSold?: number
    revenueBeforeDiscount?: number
    revenueAfterDiscount?: number
    commissionAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyCommissionEntryUncheckedCreateWithoutEmployeeInput = {
    id?: string
    date: Date | string
    serviceCode: string
    serviceName: string
    serviceGroup: string
    serviceType: $Enums.ServiceType
    quantity?: number
    timesPerformed?: number
    timesSold?: number
    revenueBeforeDiscount?: number
    revenueAfterDiscount?: number
    commissionAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyCommissionEntryCreateOrConnectWithoutEmployeeInput = {
    where: DailyCommissionEntryWhereUniqueInput
    create: XOR<DailyCommissionEntryCreateWithoutEmployeeInput, DailyCommissionEntryUncheckedCreateWithoutEmployeeInput>
  }

  export type DailyCommissionEntryCreateManyEmployeeInputEnvelope = {
    data: DailyCommissionEntryCreateManyEmployeeInput | DailyCommissionEntryCreateManyEmployeeInput[]
  }

  export type PayrollDataUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: PayrollDataWhereUniqueInput
    update: XOR<PayrollDataUpdateWithoutEmployeeInput, PayrollDataUncheckedUpdateWithoutEmployeeInput>
    create: XOR<PayrollDataCreateWithoutEmployeeInput, PayrollDataUncheckedCreateWithoutEmployeeInput>
  }

  export type PayrollDataUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: PayrollDataWhereUniqueInput
    data: XOR<PayrollDataUpdateWithoutEmployeeInput, PayrollDataUncheckedUpdateWithoutEmployeeInput>
  }

  export type PayrollDataUpdateManyWithWhereWithoutEmployeeInput = {
    where: PayrollDataScalarWhereInput
    data: XOR<PayrollDataUpdateManyMutationInput, PayrollDataUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type PayrollDataScalarWhereInput = {
    AND?: PayrollDataScalarWhereInput | PayrollDataScalarWhereInput[]
    OR?: PayrollDataScalarWhereInput[]
    NOT?: PayrollDataScalarWhereInput | PayrollDataScalarWhereInput[]
    id?: StringFilter<"PayrollData"> | string
    employeeId?: StringFilter<"PayrollData"> | string
    month?: StringFilter<"PayrollData"> | string
    dailyRevenue?: IntFilter<"PayrollData"> | number
    monthlyRevenue?: IntFilter<"PayrollData"> | number
    serviceRevenue?: IntFilter<"PayrollData"> | number
    productRevenue?: IntFilter<"PayrollData"> | number
    facialRevenue?: IntFilter<"PayrollData"> | number
    washingRevenue?: IntFilter<"PayrollData"> | number
    chemicalRevenue?: IntFilter<"PayrollData"> | number
    bleachingRevenue?: IntFilter<"PayrollData"> | number
    cuttingRevenue?: IntFilter<"PayrollData"> | number
    oilTreatmentRevenue?: IntFilter<"PayrollData"> | number
    keratinRevenue?: IntFilter<"PayrollData"> | number
    spaFootRevenue?: IntFilter<"PayrollData"> | number
    nailDesignRevenue?: IntFilter<"PayrollData"> | number
    eyebrowThreadingRevenue?: IntFilter<"PayrollData"> | number
    kpiAchieved?: BoolFilter<"PayrollData"> | boolean
    kpiDetails?: StringFilter<"PayrollData"> | string
    bonus?: IntFilter<"PayrollData"> | number
    penalty?: IntFilter<"PayrollData"> | number
    advance?: IntFilter<"PayrollData"> | number
    calculatedLevel?: StringFilter<"PayrollData"> | string
    createdAt?: DateTimeFilter<"PayrollData"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollData"> | Date | string
  }

  export type DailyCommissionEntryUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: DailyCommissionEntryWhereUniqueInput
    update: XOR<DailyCommissionEntryUpdateWithoutEmployeeInput, DailyCommissionEntryUncheckedUpdateWithoutEmployeeInput>
    create: XOR<DailyCommissionEntryCreateWithoutEmployeeInput, DailyCommissionEntryUncheckedCreateWithoutEmployeeInput>
  }

  export type DailyCommissionEntryUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: DailyCommissionEntryWhereUniqueInput
    data: XOR<DailyCommissionEntryUpdateWithoutEmployeeInput, DailyCommissionEntryUncheckedUpdateWithoutEmployeeInput>
  }

  export type DailyCommissionEntryUpdateManyWithWhereWithoutEmployeeInput = {
    where: DailyCommissionEntryScalarWhereInput
    data: XOR<DailyCommissionEntryUpdateManyMutationInput, DailyCommissionEntryUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type DailyCommissionEntryScalarWhereInput = {
    AND?: DailyCommissionEntryScalarWhereInput | DailyCommissionEntryScalarWhereInput[]
    OR?: DailyCommissionEntryScalarWhereInput[]
    NOT?: DailyCommissionEntryScalarWhereInput | DailyCommissionEntryScalarWhereInput[]
    id?: StringFilter<"DailyCommissionEntry"> | string
    employeeId?: StringFilter<"DailyCommissionEntry"> | string
    date?: DateTimeFilter<"DailyCommissionEntry"> | Date | string
    serviceCode?: StringFilter<"DailyCommissionEntry"> | string
    serviceName?: StringFilter<"DailyCommissionEntry"> | string
    serviceGroup?: StringFilter<"DailyCommissionEntry"> | string
    serviceType?: EnumServiceTypeFilter<"DailyCommissionEntry"> | $Enums.ServiceType
    quantity?: IntFilter<"DailyCommissionEntry"> | number
    timesPerformed?: IntFilter<"DailyCommissionEntry"> | number
    timesSold?: IntFilter<"DailyCommissionEntry"> | number
    revenueBeforeDiscount?: IntFilter<"DailyCommissionEntry"> | number
    revenueAfterDiscount?: IntFilter<"DailyCommissionEntry"> | number
    commissionAmount?: IntFilter<"DailyCommissionEntry"> | number
    createdAt?: DateTimeFilter<"DailyCommissionEntry"> | Date | string
    updatedAt?: DateTimeFilter<"DailyCommissionEntry"> | Date | string
  }

  export type EmployeeCreateWithoutPayrollDataInput = {
    id?: string
    name: string
    code: string
    position: string
    department: string
    employeeGroup: $Enums.EmployeeGroup
    basicSalary?: number
    allowance?: number
    currentLevel: string
    isNewEmployee?: boolean
    isActive?: boolean
    hireDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    commissionEntries?: DailyCommissionEntryCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutPayrollDataInput = {
    id?: string
    name: string
    code: string
    position: string
    department: string
    employeeGroup: $Enums.EmployeeGroup
    basicSalary?: number
    allowance?: number
    currentLevel: string
    isNewEmployee?: boolean
    isActive?: boolean
    hireDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    commissionEntries?: DailyCommissionEntryUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutPayrollDataInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutPayrollDataInput, EmployeeUncheckedCreateWithoutPayrollDataInput>
  }

  export type EmployeeUpsertWithoutPayrollDataInput = {
    update: XOR<EmployeeUpdateWithoutPayrollDataInput, EmployeeUncheckedUpdateWithoutPayrollDataInput>
    create: XOR<EmployeeCreateWithoutPayrollDataInput, EmployeeUncheckedCreateWithoutPayrollDataInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutPayrollDataInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutPayrollDataInput, EmployeeUncheckedUpdateWithoutPayrollDataInput>
  }

  export type EmployeeUpdateWithoutPayrollDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employeeGroup?: EnumEmployeeGroupFieldUpdateOperationsInput | $Enums.EmployeeGroup
    basicSalary?: IntFieldUpdateOperationsInput | number
    allowance?: IntFieldUpdateOperationsInput | number
    currentLevel?: StringFieldUpdateOperationsInput | string
    isNewEmployee?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commissionEntries?: DailyCommissionEntryUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutPayrollDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employeeGroup?: EnumEmployeeGroupFieldUpdateOperationsInput | $Enums.EmployeeGroup
    basicSalary?: IntFieldUpdateOperationsInput | number
    allowance?: IntFieldUpdateOperationsInput | number
    currentLevel?: StringFieldUpdateOperationsInput | string
    isNewEmployee?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commissionEntries?: DailyCommissionEntryUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutCommissionEntriesInput = {
    id?: string
    name: string
    code: string
    position: string
    department: string
    employeeGroup: $Enums.EmployeeGroup
    basicSalary?: number
    allowance?: number
    currentLevel: string
    isNewEmployee?: boolean
    isActive?: boolean
    hireDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    payrollData?: PayrollDataCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutCommissionEntriesInput = {
    id?: string
    name: string
    code: string
    position: string
    department: string
    employeeGroup: $Enums.EmployeeGroup
    basicSalary?: number
    allowance?: number
    currentLevel: string
    isNewEmployee?: boolean
    isActive?: boolean
    hireDate?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    payrollData?: PayrollDataUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutCommissionEntriesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCommissionEntriesInput, EmployeeUncheckedCreateWithoutCommissionEntriesInput>
  }

  export type EmployeeUpsertWithoutCommissionEntriesInput = {
    update: XOR<EmployeeUpdateWithoutCommissionEntriesInput, EmployeeUncheckedUpdateWithoutCommissionEntriesInput>
    create: XOR<EmployeeCreateWithoutCommissionEntriesInput, EmployeeUncheckedCreateWithoutCommissionEntriesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCommissionEntriesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCommissionEntriesInput, EmployeeUncheckedUpdateWithoutCommissionEntriesInput>
  }

  export type EmployeeUpdateWithoutCommissionEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employeeGroup?: EnumEmployeeGroupFieldUpdateOperationsInput | $Enums.EmployeeGroup
    basicSalary?: IntFieldUpdateOperationsInput | number
    allowance?: IntFieldUpdateOperationsInput | number
    currentLevel?: StringFieldUpdateOperationsInput | string
    isNewEmployee?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payrollData?: PayrollDataUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCommissionEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    employeeGroup?: EnumEmployeeGroupFieldUpdateOperationsInput | $Enums.EmployeeGroup
    basicSalary?: IntFieldUpdateOperationsInput | number
    allowance?: IntFieldUpdateOperationsInput | number
    currentLevel?: StringFieldUpdateOperationsInput | string
    isNewEmployee?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payrollData?: PayrollDataUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type PayrollDataCreateManyEmployeeInput = {
    id?: string
    month: string
    dailyRevenue?: number
    monthlyRevenue?: number
    serviceRevenue?: number
    productRevenue?: number
    facialRevenue?: number
    washingRevenue?: number
    chemicalRevenue?: number
    bleachingRevenue?: number
    cuttingRevenue?: number
    oilTreatmentRevenue?: number
    keratinRevenue?: number
    spaFootRevenue?: number
    nailDesignRevenue?: number
    eyebrowThreadingRevenue?: number
    kpiAchieved?: boolean
    kpiDetails?: string
    bonus?: number
    penalty?: number
    advance?: number
    calculatedLevel: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyCommissionEntryCreateManyEmployeeInput = {
    id?: string
    date: Date | string
    serviceCode: string
    serviceName: string
    serviceGroup: string
    serviceType: $Enums.ServiceType
    quantity?: number
    timesPerformed?: number
    timesSold?: number
    revenueBeforeDiscount?: number
    revenueAfterDiscount?: number
    commissionAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayrollDataUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    dailyRevenue?: IntFieldUpdateOperationsInput | number
    monthlyRevenue?: IntFieldUpdateOperationsInput | number
    serviceRevenue?: IntFieldUpdateOperationsInput | number
    productRevenue?: IntFieldUpdateOperationsInput | number
    facialRevenue?: IntFieldUpdateOperationsInput | number
    washingRevenue?: IntFieldUpdateOperationsInput | number
    chemicalRevenue?: IntFieldUpdateOperationsInput | number
    bleachingRevenue?: IntFieldUpdateOperationsInput | number
    cuttingRevenue?: IntFieldUpdateOperationsInput | number
    oilTreatmentRevenue?: IntFieldUpdateOperationsInput | number
    keratinRevenue?: IntFieldUpdateOperationsInput | number
    spaFootRevenue?: IntFieldUpdateOperationsInput | number
    nailDesignRevenue?: IntFieldUpdateOperationsInput | number
    eyebrowThreadingRevenue?: IntFieldUpdateOperationsInput | number
    kpiAchieved?: BoolFieldUpdateOperationsInput | boolean
    kpiDetails?: StringFieldUpdateOperationsInput | string
    bonus?: IntFieldUpdateOperationsInput | number
    penalty?: IntFieldUpdateOperationsInput | number
    advance?: IntFieldUpdateOperationsInput | number
    calculatedLevel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollDataUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    dailyRevenue?: IntFieldUpdateOperationsInput | number
    monthlyRevenue?: IntFieldUpdateOperationsInput | number
    serviceRevenue?: IntFieldUpdateOperationsInput | number
    productRevenue?: IntFieldUpdateOperationsInput | number
    facialRevenue?: IntFieldUpdateOperationsInput | number
    washingRevenue?: IntFieldUpdateOperationsInput | number
    chemicalRevenue?: IntFieldUpdateOperationsInput | number
    bleachingRevenue?: IntFieldUpdateOperationsInput | number
    cuttingRevenue?: IntFieldUpdateOperationsInput | number
    oilTreatmentRevenue?: IntFieldUpdateOperationsInput | number
    keratinRevenue?: IntFieldUpdateOperationsInput | number
    spaFootRevenue?: IntFieldUpdateOperationsInput | number
    nailDesignRevenue?: IntFieldUpdateOperationsInput | number
    eyebrowThreadingRevenue?: IntFieldUpdateOperationsInput | number
    kpiAchieved?: BoolFieldUpdateOperationsInput | boolean
    kpiDetails?: StringFieldUpdateOperationsInput | string
    bonus?: IntFieldUpdateOperationsInput | number
    penalty?: IntFieldUpdateOperationsInput | number
    advance?: IntFieldUpdateOperationsInput | number
    calculatedLevel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollDataUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    dailyRevenue?: IntFieldUpdateOperationsInput | number
    monthlyRevenue?: IntFieldUpdateOperationsInput | number
    serviceRevenue?: IntFieldUpdateOperationsInput | number
    productRevenue?: IntFieldUpdateOperationsInput | number
    facialRevenue?: IntFieldUpdateOperationsInput | number
    washingRevenue?: IntFieldUpdateOperationsInput | number
    chemicalRevenue?: IntFieldUpdateOperationsInput | number
    bleachingRevenue?: IntFieldUpdateOperationsInput | number
    cuttingRevenue?: IntFieldUpdateOperationsInput | number
    oilTreatmentRevenue?: IntFieldUpdateOperationsInput | number
    keratinRevenue?: IntFieldUpdateOperationsInput | number
    spaFootRevenue?: IntFieldUpdateOperationsInput | number
    nailDesignRevenue?: IntFieldUpdateOperationsInput | number
    eyebrowThreadingRevenue?: IntFieldUpdateOperationsInput | number
    kpiAchieved?: BoolFieldUpdateOperationsInput | boolean
    kpiDetails?: StringFieldUpdateOperationsInput | string
    bonus?: IntFieldUpdateOperationsInput | number
    penalty?: IntFieldUpdateOperationsInput | number
    advance?: IntFieldUpdateOperationsInput | number
    calculatedLevel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyCommissionEntryUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceGroup?: StringFieldUpdateOperationsInput | string
    serviceType?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    quantity?: IntFieldUpdateOperationsInput | number
    timesPerformed?: IntFieldUpdateOperationsInput | number
    timesSold?: IntFieldUpdateOperationsInput | number
    revenueBeforeDiscount?: IntFieldUpdateOperationsInput | number
    revenueAfterDiscount?: IntFieldUpdateOperationsInput | number
    commissionAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyCommissionEntryUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceGroup?: StringFieldUpdateOperationsInput | string
    serviceType?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    quantity?: IntFieldUpdateOperationsInput | number
    timesPerformed?: IntFieldUpdateOperationsInput | number
    timesSold?: IntFieldUpdateOperationsInput | number
    revenueBeforeDiscount?: IntFieldUpdateOperationsInput | number
    revenueAfterDiscount?: IntFieldUpdateOperationsInput | number
    commissionAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyCommissionEntryUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCode?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    serviceGroup?: StringFieldUpdateOperationsInput | string
    serviceType?: EnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType
    quantity?: IntFieldUpdateOperationsInput | number
    timesPerformed?: IntFieldUpdateOperationsInput | number
    timesSold?: IntFieldUpdateOperationsInput | number
    revenueBeforeDiscount?: IntFieldUpdateOperationsInput | number
    revenueAfterDiscount?: IntFieldUpdateOperationsInput | number
    commissionAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}